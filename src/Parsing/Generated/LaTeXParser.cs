//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/LaTeX.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LaTeXParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
        T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
        T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
        T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
        T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
        FUNCTION = 39, LETTER = 40, DIGIT = 41, WS = 42, MISC_SKIP = 43;
    public const int
        RULE_prog = 0, RULE_funcCall = 1, RULE_exprList = 2, RULE_number = 3,
        RULE_id = 4, RULE_constant = 5, RULE_desc = 6, RULE_subscript = 7, RULE_varMod = 8,
        RULE_var = 9, RULE_stringLiteral = 10, RULE_assign = 11, RULE_matrixStart = 12,
        RULE_matrixEnd = 13, RULE_matrix = 14, RULE_matrixRow = 15, RULE_matrixRowCommaDelimited = 16,
        RULE_lessThan = 17, RULE_lessThanEqual = 18, RULE_greaterThan = 19, RULE_greaterThanEqual = 20,
        RULE_comparison = 21, RULE_expr = 22, RULE_exprFunc1 = 23, RULE_exprFunc2 = 24,
        RULE_exprGroup = 25, RULE_exprParam = 26;
    public static readonly string[] ruleNames = {
        "prog", "funcCall", "exprList", "number", "id", "constant", "desc", "subscript",
        "varMod", "var", "stringLiteral", "assign", "matrixStart", "matrixEnd",
        "matrix", "matrixRow", "matrixRowCommaDelimited", "lessThan", "lessThanEqual",
        "greaterThan", "greaterThanEqual", "comparison", "expr", "exprFunc1",
        "exprFunc2", "exprGroup", "exprParam"
    };

    private static readonly string[] _LiteralNames = {
        null, "'('", "','", "'.'", "'{'", "'}'", "'\\pi'", "'-'", "'_{'", "'_'",
        "'\\bar'", "'\"'", "'''", "'='", "'\\begin{matrix}'", "'\\end{matrix}'",
        "'&'", "'\\\\'", "'<'", "'\\le'", "'q'", "'<='", "'>'", "'\\ge'", "'>='",
        "'^'", "'^{'", "'*'", "'\\ast'", "'\\times'", "'/'", "'\\dot'", "'+'",
        "'\\sqrt'", "'\\frac'", "'\\sfrac'", "')'", "'['", "']'"
    };
    private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, "FUNCTION", "LETTER", "DIGIT", "WS", "MISC_SKIP"
    };
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "LaTeX.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override int[] SerializedAtn { get { return _serializedATN; } }

    static LaTeXParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }

    public LaTeXParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

    public LaTeXParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }

    public partial class ProgContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public AssignContext assign()
        {
            return GetRuleContext<AssignContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LaTeXParser.Eof, 0); }
        public ProgContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_prog; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterProg(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitProg(this);
        }
    }

    [RuleVersion(0)]
    public ProgContext prog()
    {
        ProgContext _localctx = new ProgContext(Context, State);
        EnterRule(_localctx, 0, RULE_prog);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 54;
                assign();
                State = 55;
                Match(Eof);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FuncCallContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LaTeXParser.FUNCTION, 0); }
        public FuncCallContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_funcCall; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterFuncCall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitFuncCall(this);
        }
    }

    [RuleVersion(0)]
    public FuncCallContext funcCall()
    {
        FuncCallContext _localctx = new FuncCallContext(Context, State);
        EnterRule(_localctx, 2, RULE_funcCall);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 57;
                Match(FUNCTION);
                State = 58;
                Match(T__0);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprListContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixStartContext matrixStart()
        {
            return GetRuleContext<MatrixStartContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixRowCommaDelimitedContext matrixRowCommaDelimited()
        {
            return GetRuleContext<MatrixRowCommaDelimitedContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixEndContext matrixEnd()
        {
            return GetRuleContext<MatrixEndContext>(0);
        }
        public ExprListContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exprList; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExprList(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExprList(this);
        }
    }

    [RuleVersion(0)]
    public ExprListContext exprList()
    {
        ExprListContext _localctx = new ExprListContext(Context, State);
        EnterRule(_localctx, 4, RULE_exprList);
        int _la;
        try
        {
            State = 72;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 1, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 60;
                        expr(0);
                        State = 65;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == T__1)
                        {
                            {
                                {
                                    State = 61;
                                    Match(T__1);
                                    State = 62;
                                    expr(0);
                                }
                            }
                            State = 67;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 68;
                        matrixStart();
                        State = 69;
                        matrixRowCommaDelimited();
                        State = 70;
                        matrixEnd();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NumberContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LaTeXParser.DIGIT); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode DIGIT(int i)
        {
            return GetToken(LaTeXParser.DIGIT, i);
        }
        public NumberContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_number; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterNumber(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitNumber(this);
        }
    }

    [RuleVersion(0)]
    public NumberContext number()
    {
        NumberContext _localctx = new NumberContext(Context, State);
        EnterRule(_localctx, 6, RULE_number);
        int _la;
        try
        {
            int _alt;
            State = 91;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 5, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 77;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == DIGIT)
                        {
                            {
                                {
                                    State = 74;
                                    Match(DIGIT);
                                }
                            }
                            State = 79;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 80;
                        Match(T__2);
                        State = 82;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 81;
                                            Match(DIGIT);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 84;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 3, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 87;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 86;
                                            Match(DIGIT);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 89;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IdContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(LaTeXParser.LETTER); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode LETTER(int i)
        {
            return GetToken(LaTeXParser.LETTER, i);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LaTeXParser.DIGIT); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode DIGIT(int i)
        {
            return GetToken(LaTeXParser.DIGIT, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public IdContext id()
        {
            return GetRuleContext<IdContext>(0);
        }
        public IdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_id; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterId(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitId(this);
        }
    }

    [RuleVersion(0)]
    public IdContext id()
    {
        IdContext _localctx = new IdContext(Context, State);
        EnterRule(_localctx, 8, RULE_id);
        int _la;
        try
        {
            int _alt;
            State = 104;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case LETTER:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 93;
                        Match(LETTER);
                        State = 97;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    {
                                        State = 94;
                                        _la = TokenStream.LA(1);
                                        if (!(_la == LETTER || _la == DIGIT))
                                        {
                                            ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                }
                            }
                            State = 99;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
                        }
                    }
                    break;
                case T__3:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 100;
                        Match(T__3);
                        State = 101;
                        id();
                        State = 102;
                        Match(T__4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConstantContext : ParserRuleContext
    {
        public ConstantContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_constant; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterConstant(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitConstant(this);
        }
    }

    [RuleVersion(0)]
    public ConstantContext constant()
    {
        ConstantContext _localctx = new ConstantContext(Context, State);
        EnterRule(_localctx, 10, RULE_constant);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 106;
                Match(T__5);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DescContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LaTeXParser.DIGIT); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode DIGIT(int i)
        {
            return GetToken(LaTeXParser.DIGIT, i);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(LaTeXParser.LETTER); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode LETTER(int i)
        {
            return GetToken(LaTeXParser.LETTER, i);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(LaTeXParser.FUNCTION); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode FUNCTION(int i)
        {
            return GetToken(LaTeXParser.FUNCTION, i);
        }
        public DescContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_desc; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterDesc(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitDesc(this);
        }
    }

    [RuleVersion(0)]
    public DescContext desc()
    {
        DescContext _localctx = new DescContext(Context, State);
        EnterRule(_localctx, 12, RULE_desc);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 109;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 108;
                            _la = TokenStream.LA(1);
                            if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 3848290697348L) != 0)))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                    }
                    State = 111;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3848290697348L) != 0));
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SubscriptContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public DescContext desc()
        {
            return GetRuleContext<DescContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(LaTeXParser.DIGIT, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(LaTeXParser.LETTER, 0); }
        public SubscriptContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_subscript; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterSubscript(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitSubscript(this);
        }
    }

    [RuleVersion(0)]
    public SubscriptContext subscript()
    {
        SubscriptContext _localctx = new SubscriptContext(Context, State);
        EnterRule(_localctx, 14, RULE_subscript);
        int _la;
        try
        {
            State = 119;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__7:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 113;
                        Match(T__7);
                        State = 114;
                        desc();
                        State = 115;
                        Match(T__4);
                    }
                    break;
                case T__8:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 117;
                        Match(T__8);
                        State = 118;
                        _la = TokenStream.LA(1);
                        if (!(_la == LETTER || _la == DIGIT))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VarModContext : ParserRuleContext
    {
        public VarModContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_varMod; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterVarMod(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitVarMod(this);
        }
    }

    [RuleVersion(0)]
    public VarModContext varMod()
    {
        VarModContext _localctx = new VarModContext(Context, State);
        EnterRule(_localctx, 16, RULE_varMod);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 121;
                Match(T__9);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VarContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public VarModContext varMod()
        {
            return GetRuleContext<VarModContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public IdContext id()
        {
            return GetRuleContext<IdContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public SubscriptContext subscript()
        {
            return GetRuleContext<SubscriptContext>(0);
        }
        public VarContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_var; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterVar(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitVar(this);
        }
    }

    [RuleVersion(0)]
    public VarContext var()
    {
        VarContext _localctx = new VarContext(Context, State);
        EnterRule(_localctx, 18, RULE_var);
        try
        {
            State = 134;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__9:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 123;
                        varMod();
                        State = 124;
                        Match(T__3);
                        State = 125;
                        id();
                        State = 126;
                        Match(T__4);
                        State = 128;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
                        {
                            case 1:
                                {
                                    State = 127;
                                    subscript();
                                }
                                break;
                        }
                    }
                    break;
                case T__3:
                case LETTER:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 130;
                        id();
                        State = 132;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 11, Context))
                        {
                            case 1:
                                {
                                    State = 131;
                                    subscript();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StringLiteralContext : ParserRuleContext
    {
        public StringLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stringLiteral; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterStringLiteral(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitStringLiteral(this);
        }
    }

    [RuleVersion(0)]
    public StringLiteralContext stringLiteral()
    {
        StringLiteralContext _localctx = new StringLiteralContext(Context, State);
        EnterRule(_localctx, 20, RULE_stringLiteral);
        try
        {
            int _alt;
            State = 152;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__10:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 136;
                        Match(T__10);
                        State = 140;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 13, Context);
                        while (_alt != 1 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1 + 1)
                            {
                                {
                                    {
                                        State = 137;
                                        MatchWildcard();
                                    }
                                }
                            }
                            State = 142;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 13, Context);
                        }
                        State = 143;
                        Match(T__10);
                    }
                    break;
                case T__11:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 144;
                        Match(T__11);
                        State = 148;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
                        while (_alt != 1 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1 + 1)
                            {
                                {
                                    {
                                        State = 145;
                                        MatchWildcard();
                                    }
                                }
                            }
                            State = 150;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
                        }
                        State = 151;
                        Match(T__11);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AssignContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public VarContext var()
        {
            return GetRuleContext<VarContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public AssignContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_assign; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterAssign(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitAssign(this);
        }
    }

    [RuleVersion(0)]
    public AssignContext assign()
    {
        AssignContext _localctx = new AssignContext(Context, State);
        EnterRule(_localctx, 22, RULE_assign);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 154;
                var();
                State = 155;
                Match(T__12);
                State = 156;
                expr(0);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MatrixStartContext : ParserRuleContext
    {
        public MatrixStartContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_matrixStart; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterMatrixStart(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitMatrixStart(this);
        }
    }

    [RuleVersion(0)]
    public MatrixStartContext matrixStart()
    {
        MatrixStartContext _localctx = new MatrixStartContext(Context, State);
        EnterRule(_localctx, 24, RULE_matrixStart);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 158;
                Match(T__13);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MatrixEndContext : ParserRuleContext
    {
        public MatrixEndContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_matrixEnd; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterMatrixEnd(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitMatrixEnd(this);
        }
    }

    [RuleVersion(0)]
    public MatrixEndContext matrixEnd()
    {
        MatrixEndContext _localctx = new MatrixEndContext(Context, State);
        EnterRule(_localctx, 26, RULE_matrixEnd);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 160;
                Match(T__14);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MatrixContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixStartContext matrixStart()
        {
            return GetRuleContext<MatrixStartContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixEndContext matrixEnd()
        {
            return GetRuleContext<MatrixEndContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixRowContext[] matrixRow()
        {
            return GetRuleContexts<MatrixRowContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixRowContext matrixRow(int i)
        {
            return GetRuleContext<MatrixRowContext>(i);
        }
        public MatrixContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_matrix; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterMatrix(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitMatrix(this);
        }
    }

    [RuleVersion(0)]
    public MatrixContext matrix()
    {
        MatrixContext _localctx = new MatrixContext(Context, State);
        EnterRule(_localctx, 28, RULE_matrix);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 162;
                matrixStart();
                State = 164;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 163;
                            matrixRow();
                        }
                    }
                    State = 166;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4045859210330L) != 0));
                State = 168;
                matrixEnd();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MatrixRowContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public MatrixRowContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_matrixRow; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterMatrixRow(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitMatrixRow(this);
        }
    }

    [RuleVersion(0)]
    public MatrixRowContext matrixRow()
    {
        MatrixRowContext _localctx = new MatrixRowContext(Context, State);
        EnterRule(_localctx, 30, RULE_matrixRow);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 170;
                expr(0);
                State = 175;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__15)
                {
                    {
                        {
                            State = 171;
                            Match(T__15);
                            State = 172;
                            expr(0);
                        }
                    }
                    State = 177;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 178;
                Match(T__16);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MatrixRowCommaDelimitedContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public MatrixRowCommaDelimitedContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_matrixRowCommaDelimited; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterMatrixRowCommaDelimited(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitMatrixRowCommaDelimited(this);
        }
    }

    [RuleVersion(0)]
    public MatrixRowCommaDelimitedContext matrixRowCommaDelimited()
    {
        MatrixRowCommaDelimitedContext _localctx = new MatrixRowCommaDelimitedContext(Context, State);
        EnterRule(_localctx, 32, RULE_matrixRowCommaDelimited);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 180;
                expr(0);
                State = 186;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__1)
                {
                    {
                        {
                            State = 181;
                            Match(T__1);
                            State = 182;
                            Match(T__15);
                            State = 183;
                            expr(0);
                        }
                    }
                    State = 188;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 189;
                Match(T__16);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LessThanContext : ParserRuleContext
    {
        public LessThanContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lessThan; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterLessThan(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitLessThan(this);
        }
    }

    [RuleVersion(0)]
    public LessThanContext lessThan()
    {
        LessThanContext _localctx = new LessThanContext(Context, State);
        EnterRule(_localctx, 34, RULE_lessThan);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 191;
                Match(T__17);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LessThanEqualContext : ParserRuleContext
    {
        public LessThanEqualContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lessThanEqual; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterLessThanEqual(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitLessThanEqual(this);
        }
    }

    [RuleVersion(0)]
    public LessThanEqualContext lessThanEqual()
    {
        LessThanEqualContext _localctx = new LessThanEqualContext(Context, State);
        EnterRule(_localctx, 36, RULE_lessThanEqual);
        int _la;
        try
        {
            State = 198;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__18:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 193;
                        Match(T__18);
                        State = 195;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__19)
                        {
                            {
                                State = 194;
                                Match(T__19);
                            }
                        }

                    }
                    break;
                case T__20:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 197;
                        Match(T__20);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GreaterThanContext : ParserRuleContext
    {
        public GreaterThanContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_greaterThan; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterGreaterThan(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitGreaterThan(this);
        }
    }

    [RuleVersion(0)]
    public GreaterThanContext greaterThan()
    {
        GreaterThanContext _localctx = new GreaterThanContext(Context, State);
        EnterRule(_localctx, 38, RULE_greaterThan);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 200;
                Match(T__21);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GreaterThanEqualContext : ParserRuleContext
    {
        public GreaterThanEqualContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_greaterThanEqual; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterGreaterThanEqual(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitGreaterThanEqual(this);
        }
    }

    [RuleVersion(0)]
    public GreaterThanEqualContext greaterThanEqual()
    {
        GreaterThanEqualContext _localctx = new GreaterThanEqualContext(Context, State);
        EnterRule(_localctx, 40, RULE_greaterThanEqual);
        int _la;
        try
        {
            State = 207;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__22:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 202;
                        Match(T__22);
                        State = 204;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__19)
                        {
                            {
                                State = 203;
                                Match(T__19);
                            }
                        }

                    }
                    break;
                case T__23:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 206;
                        Match(T__23);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ComparisonContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public LessThanContext lessThan()
        {
            return GetRuleContext<LessThanContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public LessThanEqualContext lessThanEqual()
        {
            return GetRuleContext<LessThanEqualContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public GreaterThanContext greaterThan()
        {
            return GetRuleContext<GreaterThanContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public GreaterThanEqualContext greaterThanEqual()
        {
            return GetRuleContext<GreaterThanEqualContext>(0);
        }
        public ComparisonContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_comparison; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterComparison(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitComparison(this);
        }
    }

    [RuleVersion(0)]
    public ComparisonContext comparison()
    {
        ComparisonContext _localctx = new ComparisonContext(Context, State);
        EnterRule(_localctx, 42, RULE_comparison);
        try
        {
            State = 213;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__17:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 209;
                        lessThan();
                    }
                    break;
                case T__18:
                case T__20:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 210;
                        lessThanEqual();
                    }
                    break;
                case T__21:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 211;
                        greaterThan();
                    }
                    break;
                case T__22:
                case T__23:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 212;
                        greaterThanEqual();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprGroupContext exprGroup()
        {
            return GetRuleContext<ExprGroupContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public NumberContext number()
        {
            return GetRuleContext<NumberContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public VarContext var()
        {
            return GetRuleContext<VarContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ComparisonContext comparison()
        {
            return GetRuleContext<ComparisonContext>(0);
        }
        public ExprContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expr; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExpr(this);
        }
    }

    [RuleVersion(0)]
    public ExprContext expr()
    {
        return expr(0);
    }

    private ExprContext expr(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        ExprContext _localctx = new ExprContext(Context, _parentState);
        ExprContext _prevctx = _localctx;
        int _startState = 44;
        EnterRecursionRule(_localctx, 44, RULE_expr, _p);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 229;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 25, Context))
                {
                    case 1:
                        {
                            State = 216;
                            exprGroup();
                        }
                        break;
                    case 2:
                        {
                            State = 217;
                            number();
                        }
                        break;
                    case 3:
                        {
                            State = 218;
                            var();
                        }
                        break;
                    case 4:
                        {
                            State = 219;
                            constant();
                        }
                        break;
                    case 5:
                        {
                            State = 220;
                            exprGroup();
                            State = 221;
                            expr(7);
                        }
                        break;
                    case 6:
                        {
                            State = 225;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case T__2:
                                case DIGIT:
                                    {
                                        State = 223;
                                        number();
                                    }
                                    break;
                                case T__5:
                                    {
                                        State = 224;
                                        constant();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 227;
                            expr(4);
                        }
                        break;
                }
                Context.Stop = TokenStream.LT(-1);
                State = 253;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 27, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            State = 251;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 26, Context))
                            {
                                case 1:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 231;
                                        if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
                                        State = 232;
                                        Match(T__24);
                                        State = 233;
                                        expr(7);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 234;
                                        if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                        State = 235;
                                        _la = TokenStream.LA(1);
                                        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 4160749568L) != 0)))
                                        {
                                            ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 236;
                                        expr(4);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 237;
                                        if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                        State = 238;
                                        _la = TokenStream.LA(1);
                                        if (!(_la == T__6 || _la == T__31))
                                        {
                                            ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 239;
                                        expr(3);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 240;
                                        if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
                                        State = 241;
                                        comparison();
                                        State = 242;
                                        expr(2);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 244;
                                        if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
                                        State = 245;
                                        exprGroup();
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 246;
                                        if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
                                        State = 247;
                                        Match(T__25);
                                        State = 248;
                                        expr(0);
                                        State = 249;
                                        Match(T__4);
                                    }
                                    break;
                            }
                        }
                    }
                    State = 255;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 27, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class ExprFunc1Context : ParserRuleContext
    {
        public ExprFunc1Context(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exprFunc1; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExprFunc1(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExprFunc1(this);
        }
    }

    [RuleVersion(0)]
    public ExprFunc1Context exprFunc1()
    {
        ExprFunc1Context _localctx = new ExprFunc1Context(Context, State);
        EnterRule(_localctx, 46, RULE_exprFunc1);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 256;
                Match(T__32);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprFunc2Context : ParserRuleContext
    {
        public ExprFunc2Context(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exprFunc2; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExprFunc2(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExprFunc2(this);
        }
    }

    [RuleVersion(0)]
    public ExprFunc2Context exprFunc2()
    {
        ExprFunc2Context _localctx = new ExprFunc2Context(Context, State);
        EnterRule(_localctx, 48, RULE_exprFunc2);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 258;
                _la = TokenStream.LA(1);
                if (!(_la == T__33 || _la == T__34))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprGroupContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public FuncCallContext funcCall()
        {
            return GetRuleContext<FuncCallContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprListContext exprList()
        {
            return GetRuleContext<ExprListContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprFunc1Context exprFunc1()
        {
            return GetRuleContext<ExprFunc1Context>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprParamContext[] exprParam()
        {
            return GetRuleContexts<ExprParamContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprParamContext exprParam(int i)
        {
            return GetRuleContext<ExprParamContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprFunc2Context exprFunc2()
        {
            return GetRuleContext<ExprFunc2Context>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public MatrixContext matrix()
        {
            return GetRuleContext<MatrixContext>(0);
        }
        public ExprGroupContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exprGroup; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExprGroup(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExprGroup(this);
        }
    }

    [RuleVersion(0)]
    public ExprGroupContext exprGroup()
    {
        ExprGroupContext _localctx = new ExprGroupContext(Context, State);
        EnterRule(_localctx, 50, RULE_exprGroup);
        try
        {
            State = 281;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case FUNCTION:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 260;
                        funcCall();
                        State = 261;
                        exprList();
                        State = 262;
                        Match(T__35);
                    }
                    break;
                case T__0:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 264;
                        Match(T__0);
                        State = 265;
                        expr(0);
                        State = 266;
                        Match(T__35);
                    }
                    break;
                case T__36:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 268;
                        Match(T__36);
                        State = 269;
                        expr(0);
                        State = 270;
                        Match(T__37);
                    }
                    break;
                case T__32:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 272;
                        exprFunc1();
                        State = 273;
                        exprParam();
                    }
                    break;
                case T__33:
                case T__34:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 275;
                        exprFunc2();
                        State = 276;
                        exprParam();
                        State = 277;
                        exprParam();
                    }
                    break;
                case T__3:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 279;
                        exprParam();
                    }
                    break;
                case T__13:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 280;
                        matrix();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprParamContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public ExprParamContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_exprParam; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.EnterExprParam(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ILaTeXListener typedListener = listener as ILaTeXListener;
            if (typedListener != null) typedListener.ExitExprParam(this);
        }
    }

    [RuleVersion(0)]
    public ExprParamContext exprParam()
    {
        ExprParamContext _localctx = new ExprParamContext(Context, State);
        EnterRule(_localctx, 52, RULE_exprParam);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 283;
                Match(T__3);
                State = 284;
                expr(0);
                State = 285;
                Match(T__4);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
    {
        switch (ruleIndex)
        {
            case 22: return expr_sempred((ExprContext)_localctx, predIndex);
        }
        return true;
    }
    private bool expr_sempred(ExprContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 0: return Precpred(Context, 6);
            case 1: return Precpred(Context, 3);
            case 2: return Precpred(Context, 2);
            case 3: return Precpred(Context, 1);
            case 4: return Precpred(Context, 8);
            case 5: return Precpred(Context, 5);
        }
        return true;
    }

    private static int[] _serializedATN = {
        4,1,43,288,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
        7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
        2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
        2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,1,1,1,
        1,1,1,2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,1,2,1,2,1,2,1,2,3,2,73,8,2,
        1,3,5,3,76,8,3,10,3,12,3,79,9,3,1,3,1,3,4,3,83,8,3,11,3,12,3,84,1,3,4,
        3,88,8,3,11,3,12,3,89,3,3,92,8,3,1,4,1,4,5,4,96,8,4,10,4,12,4,99,9,4,1,
        4,1,4,1,4,1,4,3,4,105,8,4,1,5,1,5,1,6,4,6,110,8,6,11,6,12,6,111,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,120,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,129,8,9,
        1,9,1,9,3,9,133,8,9,3,9,135,8,9,1,10,1,10,5,10,139,8,10,10,10,12,10,142,
        9,10,1,10,1,10,1,10,5,10,147,8,10,10,10,12,10,150,9,10,1,10,3,10,153,8,
        10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,4,14,165,8,14,11,
        14,12,14,166,1,14,1,14,1,15,1,15,1,15,5,15,174,8,15,10,15,12,15,177,9,
        15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,185,8,16,10,16,12,16,188,9,16,1,
        16,1,16,1,17,1,17,1,18,1,18,3,18,196,8,18,1,18,3,18,199,8,18,1,19,1,19,
        1,20,1,20,3,20,205,8,20,1,20,3,20,208,8,20,1,21,1,21,1,21,1,21,3,21,214,
        8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,226,8,22,1,
        22,1,22,3,22,230,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,252,8,22,10,22,
        12,22,255,9,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        3,25,282,8,25,1,26,1,26,1,26,1,26,1,26,2,140,148,1,44,27,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,0,5,1,0,
        40,41,3,0,2,2,7,7,39,41,1,0,27,31,2,0,7,7,32,32,1,0,34,35,304,0,54,1,0,
        0,0,2,57,1,0,0,0,4,72,1,0,0,0,6,91,1,0,0,0,8,104,1,0,0,0,10,106,1,0,0,
        0,12,109,1,0,0,0,14,119,1,0,0,0,16,121,1,0,0,0,18,134,1,0,0,0,20,152,1,
        0,0,0,22,154,1,0,0,0,24,158,1,0,0,0,26,160,1,0,0,0,28,162,1,0,0,0,30,170,
        1,0,0,0,32,180,1,0,0,0,34,191,1,0,0,0,36,198,1,0,0,0,38,200,1,0,0,0,40,
        207,1,0,0,0,42,213,1,0,0,0,44,229,1,0,0,0,46,256,1,0,0,0,48,258,1,0,0,
        0,50,281,1,0,0,0,52,283,1,0,0,0,54,55,3,22,11,0,55,56,5,0,0,1,56,1,1,0,
        0,0,57,58,5,39,0,0,58,59,5,1,0,0,59,3,1,0,0,0,60,65,3,44,22,0,61,62,5,
        2,0,0,62,64,3,44,22,0,63,61,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,
        1,0,0,0,66,73,1,0,0,0,67,65,1,0,0,0,68,69,3,24,12,0,69,70,3,32,16,0,70,
        71,3,26,13,0,71,73,1,0,0,0,72,60,1,0,0,0,72,68,1,0,0,0,73,5,1,0,0,0,74,
        76,5,41,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,
        80,1,0,0,0,79,77,1,0,0,0,80,82,5,3,0,0,81,83,5,41,0,0,82,81,1,0,0,0,83,
        84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,92,1,0,0,0,86,88,5,41,0,0,87,
        86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,
        77,1,0,0,0,91,87,1,0,0,0,92,7,1,0,0,0,93,97,5,40,0,0,94,96,7,0,0,0,95,
        94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,105,1,0,0,0,99,
        97,1,0,0,0,100,101,5,4,0,0,101,102,3,8,4,0,102,103,5,5,0,0,103,105,1,0,
        0,0,104,93,1,0,0,0,104,100,1,0,0,0,105,9,1,0,0,0,106,107,5,6,0,0,107,11,
        1,0,0,0,108,110,7,1,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,
        0,111,112,1,0,0,0,112,13,1,0,0,0,113,114,5,8,0,0,114,115,3,12,6,0,115,
        116,5,5,0,0,116,120,1,0,0,0,117,118,5,9,0,0,118,120,7,0,0,0,119,113,1,
        0,0,0,119,117,1,0,0,0,120,15,1,0,0,0,121,122,5,10,0,0,122,17,1,0,0,0,123,
        124,3,16,8,0,124,125,5,4,0,0,125,126,3,8,4,0,126,128,5,5,0,0,127,129,3,
        14,7,0,128,127,1,0,0,0,128,129,1,0,0,0,129,135,1,0,0,0,130,132,3,8,4,0,
        131,133,3,14,7,0,132,131,1,0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,123,
        1,0,0,0,134,130,1,0,0,0,135,19,1,0,0,0,136,140,5,11,0,0,137,139,9,0,0,
        0,138,137,1,0,0,0,139,142,1,0,0,0,140,141,1,0,0,0,140,138,1,0,0,0,141,
        143,1,0,0,0,142,140,1,0,0,0,143,153,5,11,0,0,144,148,5,12,0,0,145,147,
        9,0,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,149,1,0,0,0,148,146,1,0,0,
        0,149,151,1,0,0,0,150,148,1,0,0,0,151,153,5,12,0,0,152,136,1,0,0,0,152,
        144,1,0,0,0,153,21,1,0,0,0,154,155,3,18,9,0,155,156,5,13,0,0,156,157,3,
        44,22,0,157,23,1,0,0,0,158,159,5,14,0,0,159,25,1,0,0,0,160,161,5,15,0,
        0,161,27,1,0,0,0,162,164,3,24,12,0,163,165,3,30,15,0,164,163,1,0,0,0,165,
        166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,3,
        26,13,0,169,29,1,0,0,0,170,175,3,44,22,0,171,172,5,16,0,0,172,174,3,44,
        22,0,173,171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
        178,1,0,0,0,177,175,1,0,0,0,178,179,5,17,0,0,179,31,1,0,0,0,180,186,3,
        44,22,0,181,182,5,2,0,0,182,183,5,16,0,0,183,185,3,44,22,0,184,181,1,0,
        0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,
        186,1,0,0,0,189,190,5,17,0,0,190,33,1,0,0,0,191,192,5,18,0,0,192,35,1,
        0,0,0,193,195,5,19,0,0,194,196,5,20,0,0,195,194,1,0,0,0,195,196,1,0,0,
        0,196,199,1,0,0,0,197,199,5,21,0,0,198,193,1,0,0,0,198,197,1,0,0,0,199,
        37,1,0,0,0,200,201,5,22,0,0,201,39,1,0,0,0,202,204,5,23,0,0,203,205,5,
        20,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,208,5,24,0,
        0,207,202,1,0,0,0,207,206,1,0,0,0,208,41,1,0,0,0,209,214,3,34,17,0,210,
        214,3,36,18,0,211,214,3,38,19,0,212,214,3,40,20,0,213,209,1,0,0,0,213,
        210,1,0,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,43,1,0,0,0,215,216,6,22,
        -1,0,216,230,3,50,25,0,217,230,3,6,3,0,218,230,3,18,9,0,219,230,3,10,5,
        0,220,221,3,50,25,0,221,222,3,44,22,7,222,230,1,0,0,0,223,226,3,6,3,0,
        224,226,3,10,5,0,225,223,1,0,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,228,
        3,44,22,4,228,230,1,0,0,0,229,215,1,0,0,0,229,217,1,0,0,0,229,218,1,0,
        0,0,229,219,1,0,0,0,229,220,1,0,0,0,229,225,1,0,0,0,230,253,1,0,0,0,231,
        232,10,6,0,0,232,233,5,25,0,0,233,252,3,44,22,7,234,235,10,3,0,0,235,236,
        7,2,0,0,236,252,3,44,22,4,237,238,10,2,0,0,238,239,7,3,0,0,239,252,3,44,
        22,3,240,241,10,1,0,0,241,242,3,42,21,0,242,243,3,44,22,2,243,252,1,0,
        0,0,244,245,10,8,0,0,245,252,3,50,25,0,246,247,10,5,0,0,247,248,5,26,0,
        0,248,249,3,44,22,0,249,250,5,5,0,0,250,252,1,0,0,0,251,231,1,0,0,0,251,
        234,1,0,0,0,251,237,1,0,0,0,251,240,1,0,0,0,251,244,1,0,0,0,251,246,1,
        0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,45,1,0,0,0,255,
        253,1,0,0,0,256,257,5,33,0,0,257,47,1,0,0,0,258,259,7,4,0,0,259,49,1,0,
        0,0,260,261,3,2,1,0,261,262,3,4,2,0,262,263,5,36,0,0,263,282,1,0,0,0,264,
        265,5,1,0,0,265,266,3,44,22,0,266,267,5,36,0,0,267,282,1,0,0,0,268,269,
        5,37,0,0,269,270,3,44,22,0,270,271,5,38,0,0,271,282,1,0,0,0,272,273,3,
        46,23,0,273,274,3,52,26,0,274,282,1,0,0,0,275,276,3,48,24,0,276,277,3,
        52,26,0,277,278,3,52,26,0,278,282,1,0,0,0,279,282,3,52,26,0,280,282,3,
        28,14,0,281,260,1,0,0,0,281,264,1,0,0,0,281,268,1,0,0,0,281,272,1,0,0,
        0,281,275,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,51,1,0,0,0,283,284,
        5,4,0,0,284,285,3,44,22,0,285,286,5,5,0,0,286,53,1,0,0,0,29,65,72,77,84,
        89,91,97,104,111,119,128,132,134,140,148,152,166,175,186,195,198,204,207,
        213,225,229,251,253,281
    };

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN);


}
