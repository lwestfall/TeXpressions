//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/TeXpressionMath.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, LETTER=27, DIGIT=28, WS=29, MISC_SKIP=30;
	public const int
		RULE_inlineMath = 0, RULE_expr = 1, RULE_binaryOp = 2, RULE_addOp = 3, 
		RULE_subOp = 4, RULE_mulOp = 5, RULE_divOp = 6, RULE_expOp = 7, RULE_binaryCmdName = 8, 
		RULE_divCmd = 9, RULE_assign = 10, RULE_varMod = 11, RULE_var = 12, RULE_desc = 13, 
		RULE_subscript = 14, RULE_number = 15, RULE_id = 16;
	public static readonly string[] ruleNames = {
		"inlineMath", "expr", "binaryOp", "addOp", "subOp", "mulOp", "divOp", 
		"expOp", "binaryCmdName", "divCmd", "assign", "varMod", "var", "desc", 
		"subscript", "number", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'{'", "'}{'", "'}'", "'+'", "'-'", "'*'", 
		"'\\ast'", "'\\dot'", "'\\times'", "'/'", "'\\u00F7'", "'^'", "'\\'", 
		"'d'", "'s'", "'t'", "'frac'", "'='", "'\\bar'", "','", "'_{'", "'_'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "LETTER", "DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpressionMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InlineMathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionMathParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InlineMathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineMath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterInlineMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitInlineMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineMathContext inlineMath() {
		InlineMathContext _localctx = new InlineMathContext(Context, State);
		EnterRule(_localctx, 0, RULE_inlineMath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 34;
				Match(T__0);
				State = 35;
				expr(0);
				State = 36;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 38;
				Match(T__1);
				State = 39;
				expr(0);
				State = 40;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 44;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParamExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ParamExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterParamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitParamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		public ExprContext l;
		public ExprContext r;
		public BinaryOpContext op;
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdNameContext binaryCmdName() {
			return GetRuleContext<BinaryCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				{
				_localctx = new BinaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 47;
				binaryCmdName();
				State = 48;
				Match(T__3);
				State = 49;
				((BinaryExprContext)_localctx).l = expr(0);
				State = 50;
				Match(T__4);
				State = 51;
				((BinaryExprContext)_localctx).r = expr(0);
				State = 52;
				Match(T__5);
				}
				break;
			case T__3:
			case T__21:
			case LETTER:
				{
				_localctx = new ParamExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 54;
				assign();
				}
				break;
			case T__25:
			case DIGIT:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
					((BinaryExprContext)_localctx).l = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 58;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 59;
					((BinaryExprContext)_localctx).op = binaryOp();
					State = 60;
					((BinaryExprContext)_localctx).r = expr(4);
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubOpContext subOp() {
			return GetRuleContext<SubOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulOpContext mulOp() {
			return GetRuleContext<MulOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivOpContext divOp() {
			return GetRuleContext<DivOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpOpContext expOp() {
			return GetRuleContext<ExpOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 4, RULE_binaryOp);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				addOp();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				subOp();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				mulOp();
				}
				break;
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70;
				divOp();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 5);
				{
				State = 71;
				expOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_addOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubOpContext : ParserRuleContext {
		public SubOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterSubOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitSubOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubOpContext subOp() {
		SubOpContext _localctx = new SubOpContext(Context, State);
		EnterRule(_localctx, 8, RULE_subOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulOpContext : ParserRuleContext {
		public MulOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitMulOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulOpContext mulOp() {
		MulOpContext _localctx = new MulOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_mulOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivOpContext : ParserRuleContext {
		public DivOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterDivOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitDivOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivOpContext divOp() {
		DivOpContext _localctx = new DivOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_divOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpOpContext : ParserRuleContext {
		public ExpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterExpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitExpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpOpContext expOp() {
		ExpOpContext _localctx = new ExpOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_expOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivCmdContext divCmd() {
			return GetRuleContext<DivCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryCmdName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryCmdName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			divCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivCmdContext : ParserRuleContext {
		public DivCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterDivCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitDivCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivCmdContext divCmd() {
		DivCmdContext _localctx = new DivCmdContext(Context, State);
		EnterRule(_localctx, 18, RULE_divCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__15);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) {
				{
				State = 87;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 90;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 20, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			var();
			State = 93;
			Match(T__20);
			State = 94;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVarMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVarMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 22, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 24, RULE_var);
		int _la;
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				varMod();
				State = 99;
				Match(T__3);
				State = 100;
				id();
				State = 101;
				Match(T__5);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23 || _la==T__24) {
					{
					State = 102;
					subscript();
					}
				}

				}
				break;
			case T__3:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				id();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23 || _la==T__24) {
					{
					State = 106;
					subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 26, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 111;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 411042048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 411042048L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionMathParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionMathParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 28, RULE_subscript);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(T__23);
				State = 117;
				desc();
				State = 118;
				Match(T__5);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(T__24);
				State = 121;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 30, RULE_number);
		int _la;
		try {
			int _alt;
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DIGIT) {
					{
					{
					State = 124;
					Match(DIGIT);
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 130;
				Match(T__25);
				State = 132;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 131;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 134;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 136;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 139;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 32, RULE_id);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				Match(LETTER);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LETTER || _la==DIGIT) {
					{
					{
					State = 144;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(T__3);
				State = 151;
				id();
				State = 152;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,30,157,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,43,8,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,57,8,1,1,1,1,1,1,1,1,1,5,1,
		63,8,1,10,1,12,1,66,9,1,1,2,1,2,1,2,1,2,1,2,3,2,73,8,2,1,3,1,3,1,4,1,4,
		1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,3,9,89,8,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,104,8,12,1,12,1,12,3,12,
		108,8,12,3,12,110,8,12,1,13,4,13,113,8,13,11,13,12,13,114,1,14,1,14,1,
		14,1,14,1,14,1,14,3,14,123,8,14,1,15,5,15,126,8,15,10,15,12,15,129,9,15,
		1,15,1,15,4,15,133,8,15,11,15,12,15,134,1,15,4,15,138,8,15,11,15,12,15,
		139,3,15,142,8,15,1,16,1,16,5,16,146,8,16,10,16,12,16,149,9,16,1,16,1,
		16,1,16,1,16,3,16,155,8,16,1,16,0,1,2,17,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,0,5,1,0,9,12,1,0,13,14,1,0,17,19,3,0,8,8,23,23,27,28,1,
		0,27,28,159,0,42,1,0,0,0,2,56,1,0,0,0,4,72,1,0,0,0,6,74,1,0,0,0,8,76,1,
		0,0,0,10,78,1,0,0,0,12,80,1,0,0,0,14,82,1,0,0,0,16,84,1,0,0,0,18,86,1,
		0,0,0,20,92,1,0,0,0,22,96,1,0,0,0,24,109,1,0,0,0,26,112,1,0,0,0,28,122,
		1,0,0,0,30,141,1,0,0,0,32,154,1,0,0,0,34,35,5,1,0,0,35,36,3,2,1,0,36,37,
		5,1,0,0,37,43,1,0,0,0,38,39,5,2,0,0,39,40,3,2,1,0,40,41,5,3,0,0,41,43,
		1,0,0,0,42,34,1,0,0,0,42,38,1,0,0,0,43,44,1,0,0,0,44,45,5,0,0,1,45,1,1,
		0,0,0,46,47,6,1,-1,0,47,48,3,16,8,0,48,49,5,4,0,0,49,50,3,2,1,0,50,51,
		5,5,0,0,51,52,3,2,1,0,52,53,5,6,0,0,53,57,1,0,0,0,54,57,3,20,10,0,55,57,
		3,30,15,0,56,46,1,0,0,0,56,54,1,0,0,0,56,55,1,0,0,0,57,64,1,0,0,0,58,59,
		10,3,0,0,59,60,3,4,2,0,60,61,3,2,1,4,61,63,1,0,0,0,62,58,1,0,0,0,63,66,
		1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,3,1,0,0,0,66,64,1,0,0,0,67,73,3,
		6,3,0,68,73,3,8,4,0,69,73,3,10,5,0,70,73,3,12,6,0,71,73,3,14,7,0,72,67,
		1,0,0,0,72,68,1,0,0,0,72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,0,0,0,73,5,1,
		0,0,0,74,75,5,7,0,0,75,7,1,0,0,0,76,77,5,8,0,0,77,9,1,0,0,0,78,79,7,0,
		0,0,79,11,1,0,0,0,80,81,7,1,0,0,81,13,1,0,0,0,82,83,5,15,0,0,83,15,1,0,
		0,0,84,85,3,18,9,0,85,17,1,0,0,0,86,88,5,16,0,0,87,89,7,2,0,0,88,87,1,
		0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,20,0,0,91,19,1,0,0,0,92,93,3,
		24,12,0,93,94,5,21,0,0,94,95,3,2,1,0,95,21,1,0,0,0,96,97,5,22,0,0,97,23,
		1,0,0,0,98,99,3,22,11,0,99,100,5,4,0,0,100,101,3,32,16,0,101,103,5,6,0,
		0,102,104,3,28,14,0,103,102,1,0,0,0,103,104,1,0,0,0,104,110,1,0,0,0,105,
		107,3,32,16,0,106,108,3,28,14,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,
		1,0,0,0,109,98,1,0,0,0,109,105,1,0,0,0,110,25,1,0,0,0,111,113,7,3,0,0,
		112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,27,
		1,0,0,0,116,117,5,24,0,0,117,118,3,26,13,0,118,119,5,6,0,0,119,123,1,0,
		0,0,120,121,5,25,0,0,121,123,7,4,0,0,122,116,1,0,0,0,122,120,1,0,0,0,123,
		29,1,0,0,0,124,126,5,28,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,
		0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,132,5,26,0,0,
		131,133,5,28,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,
		1,0,0,0,135,142,1,0,0,0,136,138,5,28,0,0,137,136,1,0,0,0,138,139,1,0,0,
		0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,127,1,0,0,0,141,
		137,1,0,0,0,142,31,1,0,0,0,143,147,5,27,0,0,144,146,7,4,0,0,145,144,1,
		0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,155,1,0,0,0,
		149,147,1,0,0,0,150,151,5,4,0,0,151,152,3,32,16,0,152,153,5,6,0,0,153,
		155,1,0,0,0,154,143,1,0,0,0,154,150,1,0,0,0,155,33,1,0,0,0,16,42,56,64,
		72,88,103,107,109,114,122,127,134,139,141,147,154
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
