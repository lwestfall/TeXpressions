//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/TeXpressionMath.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, LETTER=23, DIGIT=24, 
		WS=25, MISC_SKIP=26;
	public const int
		RULE_program = 0, RULE_inlineMath = 1, RULE_assign = 2, RULE_expr = 3, 
		RULE_bracedExpr = 4, RULE_binaryOp = 5, RULE_binaryCmd = 6, RULE_binaryCmdName = 7, 
		RULE_fracCmd = 8, RULE_varMod = 9, RULE_var = 10, RULE_desc = 11, RULE_subscript = 12, 
		RULE_number = 13, RULE_id = 14;
	public static readonly string[] ruleNames = {
		"program", "inlineMath", "assign", "expr", "bracedExpr", "binaryOp", "binaryCmd", 
		"binaryCmdName", "fracCmd", "varMod", "var", "desc", "subscript", "number", 
		"id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'='", "'{'", "'}'", "'+'", "'-'", "'*'", 
		"'\\ast'", "'\\dot'", "'\\times'", "'\\'", "'d'", "'s'", "'t'", "'frac'", 
		"'\\bar'", "','", "'_{'", "'_'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpressionMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineMathContext inlineMath() {
			return GetRuleContext<InlineMathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionMathParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				inlineMath();
				}
				break;
			case T__12:
			case T__21:
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				expr(0);
				State = 32;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineMathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InlineMathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineMath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterInlineMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitInlineMath(this);
		}
	}

	[RuleVersion(0)]
	public InlineMathContext inlineMath() {
		InlineMathContext _localctx = new InlineMathContext(Context, State);
		EnterRule(_localctx, 2, RULE_inlineMath);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(T__0);
				State = 37;
				expr(0);
				State = 38;
				Match(T__0);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(T__1);
				State = 41;
				expr(0);
				State = 42;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			var();
			State = 47;
			Match(T__3);
			State = 48;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdContext binaryCmd() {
			return GetRuleContext<BinaryCmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				{
				_localctx = new BinaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 51;
				binaryCmd();
				}
				break;
			case T__21:
			case DIGIT:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 52;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 55;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 56;
					binaryOp();
					State = 57;
					expr(3);
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBracedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBracedExpr(this);
		}
	}

	[RuleVersion(0)]
	public BracedExprContext bracedExpr() {
		BracedExprContext _localctx = new BracedExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_bracedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__4);
			State = 65;
			expr(0);
			State = 66;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FracCmdContext fracCmd() {
			return GetRuleContext<FracCmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedExprContext[] bracedExpr() {
			return GetRuleContexts<BracedExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedExprContext bracedExpr(int i) {
			return GetRuleContext<BracedExprContext>(i);
		}
		public BinaryCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryCmd(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdContext binaryCmd() {
		BinaryCmdContext _localctx = new BinaryCmdContext(Context, State);
		EnterRule(_localctx, 12, RULE_binaryCmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			fracCmd();
			State = 71;
			bracedExpr();
			State = 72;
			bracedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FracCmdContext fracCmd() {
			return GetRuleContext<FracCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryCmdName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryCmdName(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			fracCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FracCmdContext : ParserRuleContext {
		public FracCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fracCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterFracCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitFracCmd(this);
		}
	}

	[RuleVersion(0)]
	public FracCmdContext fracCmd() {
		FracCmdContext _localctx = new FracCmdContext(Context, State);
		EnterRule(_localctx, 16, RULE_fracCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__12);
			State = 77;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 114688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 78;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVarMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVarMod(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 18, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 20, RULE_var);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				varMod();
				State = 83;
				Match(T__4);
				State = 84;
				id();
				State = 85;
				Match(T__5);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19 || _la==T__20) {
					{
					State = 86;
					subscript();
					}
				}

				}
				break;
			case T__4:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				id();
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19 || _la==T__20) {
					{
					State = 90;
					subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitDesc(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 22, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 95;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25690368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25690368L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionMathParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionMathParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 24, RULE_subscript);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(T__19);
				State = 101;
				desc();
				State = 102;
				Match(T__5);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				Match(T__20);
				State = 105;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 26, RULE_number);
		int _la;
		try {
			int _alt;
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DIGIT) {
					{
					{
					State = 108;
					Match(DIGIT);
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 114;
				Match(T__21);
				State = 116;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 115;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 118;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 120;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 28, RULE_id);
		int _la;
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(LETTER);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LETTER || _la==DIGIT) {
					{
					{
					State = 128;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(T__4);
				State = 135;
				id();
				State = 136;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,26,141,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,1,0,1,0,3,0,35,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,45,8,1,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,54,8,3,1,3,1,3,1,3,1,3,5,3,60,8,3,10,3,
		12,3,63,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,
		8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,88,8,10,1,10,1,10,3,10,92,
		8,10,3,10,94,8,10,1,11,4,11,97,8,11,11,11,12,11,98,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,107,8,12,1,13,5,13,110,8,13,10,13,12,13,113,9,13,1,13,1,
		13,4,13,117,8,13,11,13,12,13,118,1,13,4,13,122,8,13,11,13,12,13,123,3,
		13,126,8,13,1,14,1,14,5,14,130,8,14,10,14,12,14,133,9,14,1,14,1,14,1,14,
		1,14,3,14,139,8,14,1,14,0,1,6,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,0,4,1,0,7,12,1,0,14,16,3,0,8,8,19,19,23,24,1,0,23,24,140,0,34,1,0,0,
		0,2,44,1,0,0,0,4,46,1,0,0,0,6,53,1,0,0,0,8,64,1,0,0,0,10,68,1,0,0,0,12,
		70,1,0,0,0,14,74,1,0,0,0,16,76,1,0,0,0,18,80,1,0,0,0,20,93,1,0,0,0,22,
		96,1,0,0,0,24,106,1,0,0,0,26,125,1,0,0,0,28,138,1,0,0,0,30,35,3,2,1,0,
		31,32,3,6,3,0,32,33,5,0,0,1,33,35,1,0,0,0,34,30,1,0,0,0,34,31,1,0,0,0,
		35,1,1,0,0,0,36,37,5,1,0,0,37,38,3,6,3,0,38,39,5,1,0,0,39,45,1,0,0,0,40,
		41,5,2,0,0,41,42,3,6,3,0,42,43,5,3,0,0,43,45,1,0,0,0,44,36,1,0,0,0,44,
		40,1,0,0,0,45,3,1,0,0,0,46,47,3,20,10,0,47,48,5,4,0,0,48,49,3,6,3,0,49,
		5,1,0,0,0,50,51,6,3,-1,0,51,54,3,12,6,0,52,54,3,26,13,0,53,50,1,0,0,0,
		53,52,1,0,0,0,54,61,1,0,0,0,55,56,10,2,0,0,56,57,3,10,5,0,57,58,3,6,3,
		3,58,60,1,0,0,0,59,55,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,
		0,62,7,1,0,0,0,63,61,1,0,0,0,64,65,5,5,0,0,65,66,3,6,3,0,66,67,5,6,0,0,
		67,9,1,0,0,0,68,69,7,0,0,0,69,11,1,0,0,0,70,71,3,16,8,0,71,72,3,8,4,0,
		72,73,3,8,4,0,73,13,1,0,0,0,74,75,3,16,8,0,75,15,1,0,0,0,76,77,5,13,0,
		0,77,78,7,1,0,0,78,79,5,17,0,0,79,17,1,0,0,0,80,81,5,18,0,0,81,19,1,0,
		0,0,82,83,3,18,9,0,83,84,5,5,0,0,84,85,3,28,14,0,85,87,5,6,0,0,86,88,3,
		24,12,0,87,86,1,0,0,0,87,88,1,0,0,0,88,94,1,0,0,0,89,91,3,28,14,0,90,92,
		3,24,12,0,91,90,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,82,1,0,0,0,93,89,
		1,0,0,0,94,21,1,0,0,0,95,97,7,2,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,
		1,0,0,0,98,99,1,0,0,0,99,23,1,0,0,0,100,101,5,20,0,0,101,102,3,22,11,0,
		102,103,5,6,0,0,103,107,1,0,0,0,104,105,5,21,0,0,105,107,7,3,0,0,106,100,
		1,0,0,0,106,104,1,0,0,0,107,25,1,0,0,0,108,110,5,24,0,0,109,108,1,0,0,
		0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,
		111,1,0,0,0,114,116,5,22,0,0,115,117,5,24,0,0,116,115,1,0,0,0,117,118,
		1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,126,1,0,0,0,120,122,5,24,0,
		0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,
		126,1,0,0,0,125,111,1,0,0,0,125,121,1,0,0,0,126,27,1,0,0,0,127,131,5,23,
		0,0,128,130,7,3,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,
		132,1,0,0,0,132,139,1,0,0,0,133,131,1,0,0,0,134,135,5,5,0,0,135,136,3,
		28,14,0,136,137,5,6,0,0,137,139,1,0,0,0,138,127,1,0,0,0,138,134,1,0,0,
		0,139,29,1,0,0,0,15,34,44,53,61,87,91,93,98,106,111,118,123,125,131,138
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
