//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src\antlr\TeXpressionMath.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, LETTER=23, DIGIT=24, 
		WS=25, MISC_SKIP=26;
	public const int
		RULE_inlineMath = 0, RULE_expr = 1, RULE_bracedExpr = 2, RULE_binaryOp = 3, 
		RULE_binaryCmd = 4, RULE_binaryCmdName = 5, RULE_fracCmd = 6, RULE_assign = 7, 
		RULE_varMod = 8, RULE_var = 9, RULE_desc = 10, RULE_subscript = 11, RULE_number = 12, 
		RULE_id = 13;
	public static readonly string[] ruleNames = {
		"inlineMath", "expr", "bracedExpr", "binaryOp", "binaryCmd", "binaryCmdName", 
		"fracCmd", "assign", "varMod", "var", "desc", "subscript", "number", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'{'", "'}'", "'+'", "'-'", "'*'", "'\\ast'", 
		"'\\dot'", "'\\times'", "'\\'", "'d'", "'s'", "'t'", "'frac'", "'='", 
		"'\\bar'", "','", "'_{'", "'_'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpressionMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InlineMathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionMathParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InlineMathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineMath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterInlineMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitInlineMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineMathContext inlineMath() {
		InlineMathContext _localctx = new InlineMathContext(Context, State);
		EnterRule(_localctx, 0, RULE_inlineMath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 28;
				Match(T__0);
				State = 29;
				expr(0);
				State = 30;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 32;
				Match(T__1);
				State = 33;
				expr(0);
				State = 34;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParamExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ParamExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterParamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitParamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdContext binaryCmd() {
			return GetRuleContext<BinaryCmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				_localctx = new BinaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41;
				binaryCmd();
				}
				break;
			case T__3:
			case T__17:
			case LETTER:
				{
				_localctx = new ParamExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				assign();
				}
				break;
			case T__21:
			case DIGIT:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 46;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 47;
					binaryOp();
					State = 48;
					expr(4);
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBracedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBracedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedExprContext bracedExpr() {
		BracedExprContext _localctx = new BracedExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_bracedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(T__3);
			State = 56;
			expr(0);
			State = 57;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FracCmdContext fracCmd() {
			return GetRuleContext<FracCmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedExprContext[] bracedExpr() {
			return GetRuleContexts<BracedExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedExprContext bracedExpr(int i) {
			return GetRuleContext<BracedExprContext>(i);
		}
		public BinaryCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdContext binaryCmd() {
		BinaryCmdContext _localctx = new BinaryCmdContext(Context, State);
		EnterRule(_localctx, 8, RULE_binaryCmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			fracCmd();
			State = 62;
			bracedExpr();
			State = 63;
			bracedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FracCmdContext fracCmd() {
			return GetRuleContext<FracCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterBinaryCmdName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitBinaryCmdName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			fracCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FracCmdContext : ParserRuleContext {
		public FracCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fracCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterFracCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitFracCmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFracCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FracCmdContext fracCmd() {
		FracCmdContext _localctx = new FracCmdContext(Context, State);
		EnterRule(_localctx, 12, RULE_fracCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__11);
			State = 68;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 69;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			var();
			State = 72;
			Match(T__16);
			State = 73;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVarMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVarMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 16, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 18, RULE_var);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				varMod();
				State = 78;
				Match(T__3);
				State = 79;
				id();
				State = 80;
				Match(T__4);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19 || _la==T__20) {
					{
					State = 81;
					subscript();
					}
				}

				}
				break;
			case T__3:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				id();
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19 || _la==T__20) {
					{
					State = 85;
					subscript();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 20, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 90;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25690240L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25690240L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionMathParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionMathParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 22, RULE_subscript);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(T__19);
				State = 96;
				desc();
				State = 97;
				Match(T__4);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				Match(T__20);
				State = 100;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		int _la;
		try {
			int _alt;
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DIGIT) {
					{
					{
					State = 103;
					Match(DIGIT);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109;
				Match(T__21);
				State = 111;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 110;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 115;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 118;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionMathParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionMathParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionMathParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionMathParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITeXpressionMathListener typedListener = listener as ITeXpressionMathListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionMathVisitor<TResult> typedVisitor = visitor as ITeXpressionMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 26, RULE_id);
		int _la;
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(LETTER);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LETTER || _la==DIGIT) {
					{
					{
					State = 123;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(T__3);
				State = 130;
				id();
				State = 131;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,26,136,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,3,0,37,8,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,45,8,1,1,
		1,1,1,1,1,1,1,5,1,51,8,1,10,1,12,1,54,9,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,
		1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,3,9,83,8,9,1,9,1,9,3,9,87,8,9,3,9,89,8,9,1,10,4,10,92,8,10,11,
		10,12,10,93,1,11,1,11,1,11,1,11,1,11,1,11,3,11,102,8,11,1,12,5,12,105,
		8,12,10,12,12,12,108,9,12,1,12,1,12,4,12,112,8,12,11,12,12,12,113,1,12,
		4,12,117,8,12,11,12,12,12,118,3,12,121,8,12,1,13,1,13,5,13,125,8,13,10,
		13,12,13,128,9,13,1,13,1,13,1,13,1,13,3,13,134,8,13,1,13,0,1,2,14,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,0,4,1,0,6,11,1,0,13,15,3,0,7,7,19,19,
		23,24,1,0,23,24,136,0,36,1,0,0,0,2,44,1,0,0,0,4,55,1,0,0,0,6,59,1,0,0,
		0,8,61,1,0,0,0,10,65,1,0,0,0,12,67,1,0,0,0,14,71,1,0,0,0,16,75,1,0,0,0,
		18,88,1,0,0,0,20,91,1,0,0,0,22,101,1,0,0,0,24,120,1,0,0,0,26,133,1,0,0,
		0,28,29,5,1,0,0,29,30,3,2,1,0,30,31,5,1,0,0,31,37,1,0,0,0,32,33,5,2,0,
		0,33,34,3,2,1,0,34,35,5,3,0,0,35,37,1,0,0,0,36,28,1,0,0,0,36,32,1,0,0,
		0,37,38,1,0,0,0,38,39,5,0,0,1,39,1,1,0,0,0,40,41,6,1,-1,0,41,45,3,8,4,
		0,42,45,3,14,7,0,43,45,3,24,12,0,44,40,1,0,0,0,44,42,1,0,0,0,44,43,1,0,
		0,0,45,52,1,0,0,0,46,47,10,3,0,0,47,48,3,6,3,0,48,49,3,2,1,4,49,51,1,0,
		0,0,50,46,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,3,1,0,0,
		0,54,52,1,0,0,0,55,56,5,4,0,0,56,57,3,2,1,0,57,58,5,5,0,0,58,5,1,0,0,0,
		59,60,7,0,0,0,60,7,1,0,0,0,61,62,3,12,6,0,62,63,3,4,2,0,63,64,3,4,2,0,
		64,9,1,0,0,0,65,66,3,12,6,0,66,11,1,0,0,0,67,68,5,12,0,0,68,69,7,1,0,0,
		69,70,5,16,0,0,70,13,1,0,0,0,71,72,3,18,9,0,72,73,5,17,0,0,73,74,3,2,1,
		0,74,15,1,0,0,0,75,76,5,18,0,0,76,17,1,0,0,0,77,78,3,16,8,0,78,79,5,4,
		0,0,79,80,3,26,13,0,80,82,5,5,0,0,81,83,3,22,11,0,82,81,1,0,0,0,82,83,
		1,0,0,0,83,89,1,0,0,0,84,86,3,26,13,0,85,87,3,22,11,0,86,85,1,0,0,0,86,
		87,1,0,0,0,87,89,1,0,0,0,88,77,1,0,0,0,88,84,1,0,0,0,89,19,1,0,0,0,90,
		92,7,2,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,
		21,1,0,0,0,95,96,5,20,0,0,96,97,3,20,10,0,97,98,5,5,0,0,98,102,1,0,0,0,
		99,100,5,21,0,0,100,102,7,3,0,0,101,95,1,0,0,0,101,99,1,0,0,0,102,23,1,
		0,0,0,103,105,5,24,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,
		106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,111,5,22,0,0,110,112,
		5,24,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,
		0,114,121,1,0,0,0,115,117,5,24,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,
		116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,106,1,0,0,0,120,116,1,
		0,0,0,121,25,1,0,0,0,122,126,5,23,0,0,123,125,7,3,0,0,124,123,1,0,0,0,
		125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,134,1,0,0,0,128,126,
		1,0,0,0,129,130,5,4,0,0,130,131,3,26,13,0,131,132,5,5,0,0,132,134,1,0,
		0,0,133,122,1,0,0,0,133,129,1,0,0,0,134,27,1,0,0,0,14,36,44,52,82,86,88,
		93,101,106,113,118,120,126,133
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
