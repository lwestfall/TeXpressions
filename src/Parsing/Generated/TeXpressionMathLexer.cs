//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src\antlr\TeXpressionMath.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionMathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, LETTER=23, DIGIT=24, 
		WS=25, MISC_SKIP=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "LETTER", "DIGIT", "WS", 
		"MISC_SKIP", "GREEK"
	};


	public TeXpressionMathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TeXpressionMathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'{'", "'}'", "'+'", "'-'", "'*'", "'\\ast'", 
		"'\\dot'", "'\\times'", "'\\'", "'d'", "'s'", "'t'", "'frac'", "'='", 
		"'\\bar'", "','", "'_{'", "'_'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpressionMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionMathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,202,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
		1,22,3,22,122,8,22,1,23,1,23,1,24,3,24,127,8,24,1,24,1,24,4,24,131,8,24,
		11,24,12,24,132,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,3,25,150,8,25,3,25,152,8,25,1,25,1,25,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,3,26,201,8,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,0,1,0,4,2,0,65,90,97,122,1,0,48,57,2,0,9,10,
		13,13,1,0,913,969,214,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,1,55,1,0,0,0,3,57,1,0,0,0,5,60,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,
		67,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,73,1,0,0,0,19,78,1,0,0,0,21,
		83,1,0,0,0,23,90,1,0,0,0,25,92,1,0,0,0,27,94,1,0,0,0,29,96,1,0,0,0,31,
		98,1,0,0,0,33,103,1,0,0,0,35,105,1,0,0,0,37,110,1,0,0,0,39,112,1,0,0,0,
		41,115,1,0,0,0,43,117,1,0,0,0,45,121,1,0,0,0,47,123,1,0,0,0,49,130,1,0,
		0,0,51,151,1,0,0,0,53,200,1,0,0,0,55,56,5,36,0,0,56,2,1,0,0,0,57,58,5,
		92,0,0,58,59,5,40,0,0,59,4,1,0,0,0,60,61,5,92,0,0,61,62,5,41,0,0,62,6,
		1,0,0,0,63,64,5,123,0,0,64,8,1,0,0,0,65,66,5,125,0,0,66,10,1,0,0,0,67,
		68,5,43,0,0,68,12,1,0,0,0,69,70,5,45,0,0,70,14,1,0,0,0,71,72,5,42,0,0,
		72,16,1,0,0,0,73,74,5,92,0,0,74,75,5,97,0,0,75,76,5,115,0,0,76,77,5,116,
		0,0,77,18,1,0,0,0,78,79,5,92,0,0,79,80,5,100,0,0,80,81,5,111,0,0,81,82,
		5,116,0,0,82,20,1,0,0,0,83,84,5,92,0,0,84,85,5,116,0,0,85,86,5,105,0,0,
		86,87,5,109,0,0,87,88,5,101,0,0,88,89,5,115,0,0,89,22,1,0,0,0,90,91,5,
		92,0,0,91,24,1,0,0,0,92,93,5,100,0,0,93,26,1,0,0,0,94,95,5,115,0,0,95,
		28,1,0,0,0,96,97,5,116,0,0,97,30,1,0,0,0,98,99,5,102,0,0,99,100,5,114,
		0,0,100,101,5,97,0,0,101,102,5,99,0,0,102,32,1,0,0,0,103,104,5,61,0,0,
		104,34,1,0,0,0,105,106,5,92,0,0,106,107,5,98,0,0,107,108,5,97,0,0,108,
		109,5,114,0,0,109,36,1,0,0,0,110,111,5,44,0,0,111,38,1,0,0,0,112,113,5,
		95,0,0,113,114,5,123,0,0,114,40,1,0,0,0,115,116,5,95,0,0,116,42,1,0,0,
		0,117,118,5,46,0,0,118,44,1,0,0,0,119,122,3,53,26,0,120,122,7,0,0,0,121,
		119,1,0,0,0,121,120,1,0,0,0,122,46,1,0,0,0,123,124,7,1,0,0,124,48,1,0,
		0,0,125,127,5,92,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,
		131,5,32,0,0,129,131,7,2,0,0,130,126,1,0,0,0,130,129,1,0,0,0,131,132,1,
		0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,135,6,24,0,0,
		135,50,1,0,0,0,136,137,5,92,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,
		140,5,102,0,0,140,152,5,116,0,0,141,142,5,92,0,0,142,143,5,114,0,0,143,
		144,5,105,0,0,144,145,5,103,0,0,145,146,5,104,0,0,146,147,5,116,0,0,147,
		149,1,0,0,0,148,150,5,46,0,0,149,148,1,0,0,0,149,150,1,0,0,0,150,152,1,
		0,0,0,151,136,1,0,0,0,151,141,1,0,0,0,152,153,1,0,0,0,153,154,6,25,0,0,
		154,52,1,0,0,0,155,201,7,3,0,0,156,157,5,92,0,0,157,158,5,97,0,0,158,159,
		5,108,0,0,159,160,5,112,0,0,160,161,5,104,0,0,161,201,5,97,0,0,162,163,
		5,92,0,0,163,164,5,98,0,0,164,165,5,101,0,0,165,166,5,116,0,0,166,201,
		5,97,0,0,167,168,5,92,0,0,168,169,5,100,0,0,169,170,5,101,0,0,170,171,
		5,108,0,0,171,172,5,116,0,0,172,201,5,97,0,0,173,174,5,92,0,0,174,175,
		5,112,0,0,175,176,5,104,0,0,176,201,5,105,0,0,177,178,5,92,0,0,178,179,
		5,115,0,0,179,180,5,105,0,0,180,181,5,103,0,0,181,182,5,109,0,0,182,201,
		5,97,0,0,183,184,5,92,0,0,184,185,5,116,0,0,185,186,5,97,0,0,186,201,5,
		117,0,0,187,188,5,92,0,0,188,189,5,108,0,0,189,190,5,97,0,0,190,191,5,
		109,0,0,191,192,5,98,0,0,192,193,5,100,0,0,193,201,5,97,0,0,194,195,5,
		92,0,0,195,196,5,111,0,0,196,197,5,109,0,0,197,198,5,101,0,0,198,199,5,
		103,0,0,199,201,5,97,0,0,200,155,1,0,0,0,200,156,1,0,0,0,200,162,1,0,0,
		0,200,167,1,0,0,0,200,173,1,0,0,0,200,177,1,0,0,0,200,183,1,0,0,0,200,
		187,1,0,0,0,200,194,1,0,0,0,201,54,1,0,0,0,8,0,121,126,130,132,149,151,
		200,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
