//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/Grammars/TeXpression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, AND_OP=94, 
		OR_OP=95, EQ_OP=96, LOGIC_CONST=97, ADD_OP=98, SUB_OP=99, MUL_OP=100, 
		DIV_OP=101, EXP_OP=102, NUMBER=103, NUM_CONST=104, LETTER=105, DIGIT=106, 
		WS=107, MISC_SKIP=108;
	public const int
		RULE_statement = 0, RULE_topExpr = 1, RULE_expr = 2, RULE_logicExpr = 3, 
		RULE_groupedLogic = 4, RULE_unaryLogicOpPre = 5, RULE_negLogicalOp = 6, 
		RULE_cmpOp = 7, RULE_numericExpr = 8, RULE_groupedNum = 9, RULE_unaryNumLeftRight = 10, 
		RULE_abs = 11, RULE_ceiling = 12, RULE_floor = 13, RULE_round = 14, RULE_unaryNumOpLeft = 15, 
		RULE_negNumOp = 16, RULE_trigFunc = 17, RULE_trigSuper = 18, RULE_basicTrigFunc = 19, 
		RULE_binaryCmdName = 20, RULE_divCmd = 21, RULE_varMod = 22, RULE_var = 23, 
		RULE_desc = 24, RULE_subscript = 25, RULE_id = 26;
	public static readonly string[] ruleNames = {
		"statement", "topExpr", "expr", "logicExpr", "groupedLogic", "unaryLogicOpPre", 
		"negLogicalOp", "cmpOp", "numericExpr", "groupedNum", "unaryNumLeftRight", 
		"abs", "ceiling", "floor", "round", "unaryNumOpLeft", "negNumOp", "trigFunc", 
		"trigSuper", "basicTrigFunc", "binaryCmdName", "divCmd", "varMod", "var", 
		"desc", "subscript", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'$$'", "'\\['", "'\\]'", "'='", "'('", 
		"')'", "'\\left('", "'\\right)'", "'\\bigl('", "'\\bigr)'", "'\\Bigl('", 
		"'\\Bigr)'", "'\\biggl('", "'\\biggr)'", "'\\Biggl('", "'\\Biggr)'", "'['", 
		"']'", "'\\left['", "'\\right]'", "'\\bigl['", "'\\bigr]'", "'\\Bigl['", 
		"'\\Bigr]'", "'\\bigg['", "'\\biggr]'", "'\\Bigg['", "'\\Biggr]'", "'{'", 
		"'}'", "'\\left\\{'", "'\\right\\}'", "'\\bigl\\{'", "'\\bigr\\}'", "'\\Bigl\\{'", 
		"'\\Bigr\\}'", "'\\bigg\\{'", "'\\biggr\\}'", "'\\Bigg\\{'", "'\\Biggr\\}'", 
		"'\\neg'", "'\\lnot'", "'\\lsim'", "'!'", "'<='", "'>='", "'\\leq'", "'\\geq'", 
		"'<'", "'>'", "'}{'", "'\\{'", "'\\}'", "'|'", "'\\left|'", "'\\right|'", 
		"'\\big|'", "'\\bigg|'", "'\\Bigg|'", "'\\lceil'", "'\\rceil'", "'\\left\\lceil'", 
		"'\\right\\rceil'", "'\\lfloor'", "'\\rfloor'", "'\\left\\lfloor'", "'\\right\\rfloor'", 
		"'\\sqrt'", "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccot'", "'\\sinh'", 
		"'\\cosh'", "'\\tanh'", "'\\sin'", "'\\cos'", "'\\tan'", "'\\cot'", "'\\sec'", 
		"'\\csc'", "'\\'", "'d'", "'s'", "'t'", "'frac'", "'\\bar'", "','", "'_{'", 
		"'_'", null, null, null, null, "'+'", "'-'", null, null, "'^'", null, 
		"'\\pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "AND_OP", 
		"OR_OP", "EQ_OP", "LOGIC_CONST", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", 
		"EXP_OP", "NUMBER", "NUM_CONST", "LETTER", "DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopExprContext topExpr() {
			return GetRuleContext<TopExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 54;
				Match(T__0);
				State = 55;
				topExpr();
				State = 56;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 58;
				Match(T__1);
				State = 59;
				topExpr();
				State = 60;
				Match(T__2);
				}
				break;
			case T__3:
				{
				State = 62;
				Match(T__3);
				State = 63;
				topExpr();
				State = 64;
				Match(T__3);
				}
				break;
			case T__4:
				{
				State = 66;
				Match(T__4);
				State = 67;
				topExpr();
				State = 68;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 72;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_topExpr);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				var();
				State = 75;
				Match(T__6);
				State = 76;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				logicExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				numericExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryLogicOpPreContext unaryLogicOpPre() {
			return GetRuleContext<UnaryLogicOpPreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericCompareExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public NumericCompareExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupedLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedLogicContext groupedLogic() {
			return GetRuleContext<GroupedLogicContext>(0);
		}
		public GroupedLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_CONST() { return GetToken(TeXpressionParser.LOGIC_CONST, 0); }
		public ConstLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(TeXpressionParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(TeXpressionParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new GroupedLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 86;
				groupedLogic();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87;
				unaryLogicOpPre();
				State = 88;
				logicExpr(7);
				}
				break;
			case 3:
				{
				_localctx = new NumericCompareExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90;
				numericExpr(0);
				State = 91;
				cmpOp();
				State = 92;
				numericExpr(0);
				}
				break;
			case 4:
				{
				_localctx = new ParamLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94;
				var();
				}
				break;
			case 5:
				{
				_localctx = new ConstLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(LOGIC_CONST);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 98;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 99;
						Match(AND_OP);
						State = 100;
						logicExpr(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 101;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 102;
						Match(OR_OP);
						State = 103;
						logicExpr(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 104;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 105;
						Match(EQ_OP);
						State = 106;
						logicExpr(5);
						}
						break;
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public GroupedLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedLogicContext groupedLogic() {
		GroupedLogicContext _localctx = new GroupedLogicContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupedLogic);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				Match(T__7);
				State = 113;
				logicExpr(0);
				State = 114;
				Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(T__9);
				State = 117;
				logicExpr(0);
				State = 118;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				Match(T__11);
				State = 121;
				logicExpr(0);
				State = 122;
				Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				Match(T__13);
				State = 125;
				logicExpr(0);
				State = 126;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128;
				Match(T__15);
				State = 129;
				logicExpr(0);
				State = 130;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				Match(T__17);
				State = 133;
				logicExpr(0);
				State = 134;
				Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 7);
				{
				State = 136;
				Match(T__19);
				State = 137;
				logicExpr(0);
				State = 138;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 8);
				{
				State = 140;
				Match(T__21);
				State = 141;
				logicExpr(0);
				State = 142;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 9);
				{
				State = 144;
				Match(T__23);
				State = 145;
				logicExpr(0);
				State = 146;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 10);
				{
				State = 148;
				Match(T__25);
				State = 149;
				logicExpr(0);
				State = 150;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 11);
				{
				State = 152;
				Match(T__27);
				State = 153;
				logicExpr(0);
				State = 154;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 12);
				{
				State = 156;
				Match(T__29);
				State = 157;
				logicExpr(0);
				State = 158;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 13);
				{
				State = 160;
				Match(T__31);
				State = 161;
				logicExpr(0);
				State = 162;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 14);
				{
				State = 164;
				Match(T__33);
				State = 165;
				logicExpr(0);
				State = 166;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 15);
				{
				State = 168;
				Match(T__35);
				State = 169;
				logicExpr(0);
				State = 170;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 16);
				{
				State = 172;
				Match(T__37);
				State = 173;
				logicExpr(0);
				State = 174;
				Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 17);
				{
				State = 176;
				Match(T__39);
				State = 177;
				logicExpr(0);
				State = 178;
				Match(T__40);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 18);
				{
				State = 180;
				Match(T__41);
				State = 181;
				logicExpr(0);
				State = 182;
				Match(T__42);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryLogicOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegLogicalOpContext negLogicalOp() {
			return GetRuleContext<NegLogicalOpContext>(0);
		}
		public UnaryLogicOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryLogicOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryLogicOpPreContext unaryLogicOpPre() {
		UnaryLogicOpPreContext _localctx = new UnaryLogicOpPreContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryLogicOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			negLogicalOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegLogicalOpContext : ParserRuleContext {
		public NegLogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negLogicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegLogicalOpContext negLogicalOp() {
		NegLogicalOpContext _localctx = new NegLogicalOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_negLogicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 263882790666240L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & 281474976710719L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExprContext : ParserRuleContext {
		public NumericExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpr; } }
	 
		public NumericExprContext() { }
		public virtual void CopyFrom(NumericExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupedNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedNumContext groupedNum() {
			return GetRuleContext<GroupedNumContext>(0);
		}
		public GroupedNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TeXpressionParser.NUMBER, 0); }
		public ConstNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumLeftRightContext unaryNumLeftRight() {
			return GetRuleContext<UnaryNumLeftRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumOpLeftContext unaryNumOpLeft() {
			return GetRuleContext<UnaryNumOpLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public UnaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdNameContext binaryCmdName() {
			return GetRuleContext<BinaryCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_OP() { return GetToken(TeXpressionParser.MUL_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(TeXpressionParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_OP() { return GetToken(TeXpressionParser.ADD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public BinaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumConstParamExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_CONST() { return GetToken(TeXpressionParser.NUM_CONST, 0); }
		public NumConstParamExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumConstParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExprContext numericExpr() {
		return numericExpr(0);
	}

	private NumericExprContext numericExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExprContext _localctx = new NumericExprContext(Context, _parentState);
		NumericExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_numericExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__9:
			case T__11:
			case T__13:
			case T__15:
			case T__17:
			case T__19:
			case T__21:
			case T__23:
			case T__25:
			case T__27:
			case T__29:
			case T__31:
			case T__33:
			case T__35:
			case T__37:
			case T__39:
			case T__41:
			case T__54:
				{
				_localctx = new GroupedNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 193;
				groupedNum();
				}
				break;
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__64:
			case T__66:
			case T__68:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 194;
				unaryNumLeftRight();
				}
				break;
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case SUB_OP:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 195;
				unaryNumOpLeft();
				State = 196;
				numericExpr(10);
				}
				break;
			case T__84:
				{
				_localctx = new BinaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				binaryCmdName();
				State = 199;
				Match(T__31);
				State = 200;
				numericExpr(0);
				State = 201;
				Match(T__53);
				State = 202;
				numericExpr(0);
				State = 203;
				Match(T__32);
				}
				break;
			case T__89:
			case LETTER:
				{
				_localctx = new ParamNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 205;
				var();
				}
				break;
			case NUM_CONST:
				{
				_localctx = new NumConstParamExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206;
				Match(NUM_CONST);
				}
				break;
			case NUMBER:
				{
				_localctx = new ConstNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 225;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 210;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 211;
						Match(EXP_OP);
						State = 212;
						numericExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 213;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 214;
						Match(MUL_OP);
						State = 215;
						numericExpr(8);
						}
						break;
					case 3:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 216;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 217;
						Match(DIV_OP);
						State = 218;
						numericExpr(7);
						}
						break;
					case 4:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 219;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 220;
						Match(ADD_OP);
						State = 221;
						numericExpr(6);
						}
						break;
					case 5:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 222;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 223;
						Match(SUB_OP);
						State = 224;
						numericExpr(5);
						}
						break;
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public GroupedNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedNumContext groupedNum() {
		GroupedNumContext _localctx = new GroupedNumContext(Context, State);
		EnterRule(_localctx, 18, RULE_groupedNum);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				Match(T__7);
				State = 231;
				numericExpr(0);
				State = 232;
				Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(T__9);
				State = 235;
				numericExpr(0);
				State = 236;
				Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				Match(T__11);
				State = 239;
				numericExpr(0);
				State = 240;
				Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242;
				Match(T__13);
				State = 243;
				numericExpr(0);
				State = 244;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 246;
				Match(T__15);
				State = 247;
				numericExpr(0);
				State = 248;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 6);
				{
				State = 250;
				Match(T__17);
				State = 251;
				numericExpr(0);
				State = 252;
				Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 7);
				{
				State = 254;
				Match(T__19);
				State = 255;
				numericExpr(0);
				State = 256;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 8);
				{
				State = 258;
				Match(T__21);
				State = 259;
				numericExpr(0);
				State = 260;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 9);
				{
				State = 262;
				Match(T__23);
				State = 263;
				numericExpr(0);
				State = 264;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 10);
				{
				State = 266;
				Match(T__25);
				State = 267;
				numericExpr(0);
				State = 268;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 11);
				{
				State = 270;
				Match(T__27);
				State = 271;
				numericExpr(0);
				State = 272;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 12);
				{
				State = 274;
				Match(T__29);
				State = 275;
				numericExpr(0);
				State = 276;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 13);
				{
				State = 278;
				Match(T__31);
				State = 279;
				numericExpr(0);
				State = 280;
				Match(T__32);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 14);
				{
				State = 282;
				Match(T__54);
				State = 283;
				numericExpr(0);
				State = 284;
				Match(T__55);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 15);
				{
				State = 286;
				Match(T__33);
				State = 287;
				numericExpr(0);
				State = 288;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 16);
				{
				State = 290;
				Match(T__35);
				State = 291;
				numericExpr(0);
				State = 292;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 17);
				{
				State = 294;
				Match(T__37);
				State = 295;
				numericExpr(0);
				State = 296;
				Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 18);
				{
				State = 298;
				Match(T__39);
				State = 299;
				numericExpr(0);
				State = 300;
				Match(T__40);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 19);
				{
				State = 302;
				Match(T__41);
				State = 303;
				numericExpr(0);
				State = 304;
				Match(T__42);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumLeftRightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CeilingContext ceiling() {
			return GetRuleContext<CeilingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloorContext floor() {
			return GetRuleContext<FloorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundContext round() {
			return GetRuleContext<RoundContext>(0);
		}
		public UnaryNumLeftRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumLeftRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumLeftRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumLeftRightContext unaryNumLeftRight() {
		UnaryNumLeftRightContext _localctx = new UnaryNumLeftRightContext(Context, State);
		EnterRule(_localctx, 20, RULE_unaryNumLeftRight);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				abs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				ceiling();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310;
				floor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				round();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public AbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsContext abs() {
		AbsContext _localctx = new AbsContext(Context, State);
		EnterRule(_localctx, 22, RULE_abs);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__56:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				Match(T__56);
				State = 315;
				numericExpr(0);
				State = 316;
				Match(T__56);
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				Match(T__57);
				State = 319;
				numericExpr(0);
				State = 320;
				Match(T__58);
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(T__59);
				State = 323;
				numericExpr(0);
				State = 324;
				Match(T__59);
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 4);
				{
				State = 326;
				Match(T__60);
				State = 327;
				numericExpr(0);
				State = 328;
				Match(T__60);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330;
				Match(T__61);
				State = 331;
				numericExpr(0);
				State = 332;
				Match(T__61);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CeilingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public CeilingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ceiling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCeiling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CeilingContext ceiling() {
		CeilingContext _localctx = new CeilingContext(Context, State);
		EnterRule(_localctx, 24, RULE_ceiling);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				Match(T__62);
				State = 337;
				numericExpr(0);
				State = 338;
				Match(T__63);
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				Match(T__64);
				State = 341;
				numericExpr(0);
				State = 342;
				Match(T__65);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public FloorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorContext floor() {
		FloorContext _localctx = new FloorContext(Context, State);
		EnterRule(_localctx, 26, RULE_floor);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				Match(T__66);
				State = 347;
				numericExpr(0);
				State = 348;
				Match(T__67);
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(T__68);
				State = 351;
				numericExpr(0);
				State = 352;
				Match(T__69);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public RoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_round; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundContext round() {
		RoundContext _localctx = new RoundContext(Context, State);
		EnterRule(_localctx, 28, RULE_round);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				Match(T__66);
				State = 357;
				numericExpr(0);
				State = 358;
				Match(T__63);
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(T__68);
				State = 361;
				numericExpr(0);
				State = 362;
				Match(T__65);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumOpLeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrigFuncContext trigFunc() {
			return GetRuleContext<TrigFuncContext>(0);
		}
		public UnaryNumOpLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumOpLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumOpLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumOpLeftContext unaryNumOpLeft() {
		UnaryNumOpLeftContext _localctx = new UnaryNumOpLeftContext(Context, State);
		EnterRule(_localctx, 30, RULE_unaryNumOpLeft);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				Match(SUB_OP);
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				Match(T__70);
				}
				break;
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
				EnterOuterAlt(_localctx, 3);
				{
				State = 368;
				trigFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegNumOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public NegNumOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negNumOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegNumOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegNumOpContext negNumOp() {
		NegNumOpContext _localctx = new NegNumOpContext(Context, State);
		EnterRule(_localctx, 32, RULE_negNumOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(SUB_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrigFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicTrigFuncContext basicTrigFunc() {
			return GetRuleContext<BasicTrigFuncContext>(0);
		}
		public TrigFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrigFuncContext trigFunc() {
		TrigFuncContext _localctx = new TrigFuncContext(Context, State);
		EnterRule(_localctx, 34, RULE_trigFunc);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				basicTrigFunc();
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				Match(T__71);
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				Match(T__72);
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376;
				Match(T__73);
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377;
				Match(T__74);
				}
				break;
			case T__75:
				EnterOuterAlt(_localctx, 6);
				{
				State = 378;
				Match(T__75);
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 7);
				{
				State = 379;
				Match(T__76);
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 8);
				{
				State = 380;
				Match(T__77);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrigSuperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public TrigSuperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigSuper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigSuper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrigSuperContext trigSuper() {
		TrigSuperContext _localctx = new TrigSuperContext(Context, State);
		EnterRule(_localctx, 36, RULE_trigSuper);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				Match(EXP_OP);
				State = 384;
				Match(T__31);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUB_OP) {
					{
					State = 385;
					Match(SUB_OP);
					}
				}

				State = 388;
				Match(DIGIT);
				State = 389;
				Match(T__32);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390;
				Match(EXP_OP);
				State = 391;
				Match(DIGIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTrigFuncContext : ParserRuleContext {
		public BasicTrigFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicTrigFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTrigFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTrigFuncContext basicTrigFunc() {
		BasicTrigFuncContext _localctx = new BasicTrigFuncContext(Context, State);
		EnterRule(_localctx, 38, RULE_basicTrigFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivCmdContext divCmd() {
			return GetRuleContext<DivCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			divCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivCmdContext : ParserRuleContext {
		public DivCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivCmdContext divCmd() {
		DivCmdContext _localctx = new DivCmdContext(Context, State);
		EnterRule(_localctx, 42, RULE_divCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(T__84);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 7L) != 0)) {
				{
				State = 399;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 402;
			Match(T__88);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 44, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 46, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__89:
				{
				State = 406;
				varMod();
				State = 407;
				Match(T__31);
				State = 408;
				id();
				State = 409;
				Match(T__32);
				}
				break;
			case LETTER:
				{
				State = 411;
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 414;
				subscript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_OP() { return GetTokens(TeXpressionParser.SUB_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP(int i) {
			return GetToken(TeXpressionParser.SUB_OP, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 48, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 417;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 49409L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 49409L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 50, RULE_subscript);
		int _la;
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__91:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				Match(T__91);
				State = 423;
				desc();
				State = 424;
				Match(T__32);
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426;
				Match(T__92);
				State = 427;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 52, RULE_id);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(LETTER);
			State = 434;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 431;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 436;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 8: return numericExpr_sempred((NumericExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}
	private bool numericExpr_sempred(NumericExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,108,438,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,71,8,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,3,1,80,8,1,1,2,1,2,3,2,84,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,97,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,108,
		8,3,10,3,12,3,111,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,185,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,209,8,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,226,
		8,8,10,8,12,8,229,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,307,8,9,1,10,1,10,1,
		10,1,10,3,10,313,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,335,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,345,8,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,355,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,365,8,14,1,15,1,15,1,15,3,15,370,8,15,1,16,1,16,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,3,17,382,8,17,1,18,1,18,1,18,3,18,387,8,18,1,18,1,
		18,1,18,1,18,3,18,393,8,18,1,19,1,19,1,20,1,20,1,21,1,21,3,21,401,8,21,
		1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,413,8,23,1,23,3,
		23,416,8,23,1,24,4,24,419,8,24,11,24,12,24,420,1,25,1,25,1,25,1,25,1,25,
		1,25,3,25,429,8,25,1,26,1,26,5,26,433,8,26,10,26,12,26,436,9,26,1,26,0,
		2,6,16,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,0,6,1,0,44,47,2,0,48,53,96,96,1,0,79,84,1,0,86,88,3,0,91,
		91,99,99,105,106,1,0,105,106,495,0,70,1,0,0,0,2,79,1,0,0,0,4,83,1,0,0,
		0,6,96,1,0,0,0,8,184,1,0,0,0,10,186,1,0,0,0,12,188,1,0,0,0,14,190,1,0,
		0,0,16,208,1,0,0,0,18,306,1,0,0,0,20,312,1,0,0,0,22,334,1,0,0,0,24,344,
		1,0,0,0,26,354,1,0,0,0,28,364,1,0,0,0,30,369,1,0,0,0,32,371,1,0,0,0,34,
		381,1,0,0,0,36,392,1,0,0,0,38,394,1,0,0,0,40,396,1,0,0,0,42,398,1,0,0,
		0,44,404,1,0,0,0,46,412,1,0,0,0,48,418,1,0,0,0,50,428,1,0,0,0,52,430,1,
		0,0,0,54,55,5,1,0,0,55,56,3,2,1,0,56,57,5,1,0,0,57,71,1,0,0,0,58,59,5,
		2,0,0,59,60,3,2,1,0,60,61,5,3,0,0,61,71,1,0,0,0,62,63,5,4,0,0,63,64,3,
		2,1,0,64,65,5,4,0,0,65,71,1,0,0,0,66,67,5,5,0,0,67,68,3,2,1,0,68,69,5,
		6,0,0,69,71,1,0,0,0,70,54,1,0,0,0,70,58,1,0,0,0,70,62,1,0,0,0,70,66,1,
		0,0,0,71,72,1,0,0,0,72,73,5,0,0,1,73,1,1,0,0,0,74,75,3,46,23,0,75,76,5,
		7,0,0,76,77,3,4,2,0,77,80,1,0,0,0,78,80,3,4,2,0,79,74,1,0,0,0,79,78,1,
		0,0,0,80,3,1,0,0,0,81,84,3,6,3,0,82,84,3,16,8,0,83,81,1,0,0,0,83,82,1,
		0,0,0,84,5,1,0,0,0,85,86,6,3,-1,0,86,97,3,8,4,0,87,88,3,10,5,0,88,89,3,
		6,3,7,89,97,1,0,0,0,90,91,3,16,8,0,91,92,3,14,7,0,92,93,3,16,8,0,93,97,
		1,0,0,0,94,97,3,46,23,0,95,97,5,97,0,0,96,85,1,0,0,0,96,87,1,0,0,0,96,
		90,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,109,1,0,0,0,98,99,10,6,0,0,99,
		100,5,94,0,0,100,108,3,6,3,7,101,102,10,5,0,0,102,103,5,95,0,0,103,108,
		3,6,3,6,104,105,10,4,0,0,105,106,5,96,0,0,106,108,3,6,3,5,107,98,1,0,0,
		0,107,101,1,0,0,0,107,104,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,
		110,1,0,0,0,110,7,1,0,0,0,111,109,1,0,0,0,112,113,5,8,0,0,113,114,3,6,
		3,0,114,115,5,9,0,0,115,185,1,0,0,0,116,117,5,10,0,0,117,118,3,6,3,0,118,
		119,5,11,0,0,119,185,1,0,0,0,120,121,5,12,0,0,121,122,3,6,3,0,122,123,
		5,13,0,0,123,185,1,0,0,0,124,125,5,14,0,0,125,126,3,6,3,0,126,127,5,15,
		0,0,127,185,1,0,0,0,128,129,5,16,0,0,129,130,3,6,3,0,130,131,5,17,0,0,
		131,185,1,0,0,0,132,133,5,18,0,0,133,134,3,6,3,0,134,135,5,19,0,0,135,
		185,1,0,0,0,136,137,5,20,0,0,137,138,3,6,3,0,138,139,5,21,0,0,139,185,
		1,0,0,0,140,141,5,22,0,0,141,142,3,6,3,0,142,143,5,23,0,0,143,185,1,0,
		0,0,144,145,5,24,0,0,145,146,3,6,3,0,146,147,5,25,0,0,147,185,1,0,0,0,
		148,149,5,26,0,0,149,150,3,6,3,0,150,151,5,27,0,0,151,185,1,0,0,0,152,
		153,5,28,0,0,153,154,3,6,3,0,154,155,5,29,0,0,155,185,1,0,0,0,156,157,
		5,30,0,0,157,158,3,6,3,0,158,159,5,31,0,0,159,185,1,0,0,0,160,161,5,32,
		0,0,161,162,3,6,3,0,162,163,5,33,0,0,163,185,1,0,0,0,164,165,5,34,0,0,
		165,166,3,6,3,0,166,167,5,35,0,0,167,185,1,0,0,0,168,169,5,36,0,0,169,
		170,3,6,3,0,170,171,5,37,0,0,171,185,1,0,0,0,172,173,5,38,0,0,173,174,
		3,6,3,0,174,175,5,39,0,0,175,185,1,0,0,0,176,177,5,40,0,0,177,178,3,6,
		3,0,178,179,5,41,0,0,179,185,1,0,0,0,180,181,5,42,0,0,181,182,3,6,3,0,
		182,183,5,43,0,0,183,185,1,0,0,0,184,112,1,0,0,0,184,116,1,0,0,0,184,120,
		1,0,0,0,184,124,1,0,0,0,184,128,1,0,0,0,184,132,1,0,0,0,184,136,1,0,0,
		0,184,140,1,0,0,0,184,144,1,0,0,0,184,148,1,0,0,0,184,152,1,0,0,0,184,
		156,1,0,0,0,184,160,1,0,0,0,184,164,1,0,0,0,184,168,1,0,0,0,184,172,1,
		0,0,0,184,176,1,0,0,0,184,180,1,0,0,0,185,9,1,0,0,0,186,187,3,12,6,0,187,
		11,1,0,0,0,188,189,7,0,0,0,189,13,1,0,0,0,190,191,7,1,0,0,191,15,1,0,0,
		0,192,193,6,8,-1,0,193,209,3,18,9,0,194,209,3,20,10,0,195,196,3,30,15,
		0,196,197,3,16,8,10,197,209,1,0,0,0,198,199,3,40,20,0,199,200,5,32,0,0,
		200,201,3,16,8,0,201,202,5,54,0,0,202,203,3,16,8,0,203,204,5,33,0,0,204,
		209,1,0,0,0,205,209,3,46,23,0,206,209,5,104,0,0,207,209,5,103,0,0,208,
		192,1,0,0,0,208,194,1,0,0,0,208,195,1,0,0,0,208,198,1,0,0,0,208,205,1,
		0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,227,1,0,0,0,210,211,10,8,0,0,
		211,212,5,102,0,0,212,226,3,16,8,8,213,214,10,7,0,0,214,215,5,100,0,0,
		215,226,3,16,8,8,216,217,10,6,0,0,217,218,5,101,0,0,218,226,3,16,8,7,219,
		220,10,5,0,0,220,221,5,98,0,0,221,226,3,16,8,6,222,223,10,4,0,0,223,224,
		5,99,0,0,224,226,3,16,8,5,225,210,1,0,0,0,225,213,1,0,0,0,225,216,1,0,
		0,0,225,219,1,0,0,0,225,222,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,
		228,1,0,0,0,228,17,1,0,0,0,229,227,1,0,0,0,230,231,5,8,0,0,231,232,3,16,
		8,0,232,233,5,9,0,0,233,307,1,0,0,0,234,235,5,10,0,0,235,236,3,16,8,0,
		236,237,5,11,0,0,237,307,1,0,0,0,238,239,5,12,0,0,239,240,3,16,8,0,240,
		241,5,13,0,0,241,307,1,0,0,0,242,243,5,14,0,0,243,244,3,16,8,0,244,245,
		5,15,0,0,245,307,1,0,0,0,246,247,5,16,0,0,247,248,3,16,8,0,248,249,5,17,
		0,0,249,307,1,0,0,0,250,251,5,18,0,0,251,252,3,16,8,0,252,253,5,19,0,0,
		253,307,1,0,0,0,254,255,5,20,0,0,255,256,3,16,8,0,256,257,5,21,0,0,257,
		307,1,0,0,0,258,259,5,22,0,0,259,260,3,16,8,0,260,261,5,23,0,0,261,307,
		1,0,0,0,262,263,5,24,0,0,263,264,3,16,8,0,264,265,5,25,0,0,265,307,1,0,
		0,0,266,267,5,26,0,0,267,268,3,16,8,0,268,269,5,27,0,0,269,307,1,0,0,0,
		270,271,5,28,0,0,271,272,3,16,8,0,272,273,5,29,0,0,273,307,1,0,0,0,274,
		275,5,30,0,0,275,276,3,16,8,0,276,277,5,31,0,0,277,307,1,0,0,0,278,279,
		5,32,0,0,279,280,3,16,8,0,280,281,5,33,0,0,281,307,1,0,0,0,282,283,5,55,
		0,0,283,284,3,16,8,0,284,285,5,56,0,0,285,307,1,0,0,0,286,287,5,34,0,0,
		287,288,3,16,8,0,288,289,5,35,0,0,289,307,1,0,0,0,290,291,5,36,0,0,291,
		292,3,16,8,0,292,293,5,37,0,0,293,307,1,0,0,0,294,295,5,38,0,0,295,296,
		3,16,8,0,296,297,5,39,0,0,297,307,1,0,0,0,298,299,5,40,0,0,299,300,3,16,
		8,0,300,301,5,41,0,0,301,307,1,0,0,0,302,303,5,42,0,0,303,304,3,16,8,0,
		304,305,5,43,0,0,305,307,1,0,0,0,306,230,1,0,0,0,306,234,1,0,0,0,306,238,
		1,0,0,0,306,242,1,0,0,0,306,246,1,0,0,0,306,250,1,0,0,0,306,254,1,0,0,
		0,306,258,1,0,0,0,306,262,1,0,0,0,306,266,1,0,0,0,306,270,1,0,0,0,306,
		274,1,0,0,0,306,278,1,0,0,0,306,282,1,0,0,0,306,286,1,0,0,0,306,290,1,
		0,0,0,306,294,1,0,0,0,306,298,1,0,0,0,306,302,1,0,0,0,307,19,1,0,0,0,308,
		313,3,22,11,0,309,313,3,24,12,0,310,313,3,26,13,0,311,313,3,28,14,0,312,
		308,1,0,0,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,21,1,0,
		0,0,314,315,5,57,0,0,315,316,3,16,8,0,316,317,5,57,0,0,317,335,1,0,0,0,
		318,319,5,58,0,0,319,320,3,16,8,0,320,321,5,59,0,0,321,335,1,0,0,0,322,
		323,5,60,0,0,323,324,3,16,8,0,324,325,5,60,0,0,325,335,1,0,0,0,326,327,
		5,61,0,0,327,328,3,16,8,0,328,329,5,61,0,0,329,335,1,0,0,0,330,331,5,62,
		0,0,331,332,3,16,8,0,332,333,5,62,0,0,333,335,1,0,0,0,334,314,1,0,0,0,
		334,318,1,0,0,0,334,322,1,0,0,0,334,326,1,0,0,0,334,330,1,0,0,0,335,23,
		1,0,0,0,336,337,5,63,0,0,337,338,3,16,8,0,338,339,5,64,0,0,339,345,1,0,
		0,0,340,341,5,65,0,0,341,342,3,16,8,0,342,343,5,66,0,0,343,345,1,0,0,0,
		344,336,1,0,0,0,344,340,1,0,0,0,345,25,1,0,0,0,346,347,5,67,0,0,347,348,
		3,16,8,0,348,349,5,68,0,0,349,355,1,0,0,0,350,351,5,69,0,0,351,352,3,16,
		8,0,352,353,5,70,0,0,353,355,1,0,0,0,354,346,1,0,0,0,354,350,1,0,0,0,355,
		27,1,0,0,0,356,357,5,67,0,0,357,358,3,16,8,0,358,359,5,64,0,0,359,365,
		1,0,0,0,360,361,5,69,0,0,361,362,3,16,8,0,362,363,5,66,0,0,363,365,1,0,
		0,0,364,356,1,0,0,0,364,360,1,0,0,0,365,29,1,0,0,0,366,370,5,99,0,0,367,
		370,5,71,0,0,368,370,3,34,17,0,369,366,1,0,0,0,369,367,1,0,0,0,369,368,
		1,0,0,0,370,31,1,0,0,0,371,372,5,99,0,0,372,33,1,0,0,0,373,382,3,38,19,
		0,374,382,5,72,0,0,375,382,5,73,0,0,376,382,5,74,0,0,377,382,5,75,0,0,
		378,382,5,76,0,0,379,382,5,77,0,0,380,382,5,78,0,0,381,373,1,0,0,0,381,
		374,1,0,0,0,381,375,1,0,0,0,381,376,1,0,0,0,381,377,1,0,0,0,381,378,1,
		0,0,0,381,379,1,0,0,0,381,380,1,0,0,0,382,35,1,0,0,0,383,384,5,102,0,0,
		384,386,5,32,0,0,385,387,5,99,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,
		388,1,0,0,0,388,389,5,106,0,0,389,393,5,33,0,0,390,391,5,102,0,0,391,393,
		5,106,0,0,392,383,1,0,0,0,392,390,1,0,0,0,393,37,1,0,0,0,394,395,7,2,0,
		0,395,39,1,0,0,0,396,397,3,42,21,0,397,41,1,0,0,0,398,400,5,85,0,0,399,
		401,7,3,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,
		89,0,0,403,43,1,0,0,0,404,405,5,90,0,0,405,45,1,0,0,0,406,407,3,44,22,
		0,407,408,5,32,0,0,408,409,3,52,26,0,409,410,5,33,0,0,410,413,1,0,0,0,
		411,413,3,52,26,0,412,406,1,0,0,0,412,411,1,0,0,0,413,415,1,0,0,0,414,
		416,3,50,25,0,415,414,1,0,0,0,415,416,1,0,0,0,416,47,1,0,0,0,417,419,7,
		4,0,0,418,417,1,0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,
		421,49,1,0,0,0,422,423,5,92,0,0,423,424,3,48,24,0,424,425,5,33,0,0,425,
		429,1,0,0,0,426,427,5,93,0,0,427,429,7,5,0,0,428,422,1,0,0,0,428,426,1,
		0,0,0,429,51,1,0,0,0,430,434,5,105,0,0,431,433,7,5,0,0,432,431,1,0,0,0,
		433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,53,1,0,0,0,436,434,
		1,0,0,0,26,70,79,83,96,107,109,184,208,225,227,306,312,334,344,354,364,
		369,381,386,392,400,412,415,420,428,434
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
