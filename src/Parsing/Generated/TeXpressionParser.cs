//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/TeXpression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, BIN_LOGIC_OP=24, 
		CMP_OP=25, AND_OP=26, OR_OP=27, EQ_OP=28, LOGIC_CONST=29, ADD_OP=30, SUB_OP=31, 
		MUL_OP=32, DIV_OP=33, EXP_OP=34, NUMBER=35, NUM_CONST=36, LETTER=37, DIGIT=38, 
		WS=39, MISC_SKIP=40;
	public const int
		RULE_inline = 0, RULE_topExpr = 1, RULE_expr = 2, RULE_logicExpr = 3, 
		RULE_unaryLogicOpPre = 4, RULE_negLogicalOp = 5, RULE_numericExpr = 6, 
		RULE_unaryNumCmdName = 7, RULE_unaryNumOpPre = 8, RULE_negNumOp = 9, RULE_binaryCmdName = 10, 
		RULE_divCmd = 11, RULE_binaryNumericOp = 12, RULE_varMod = 13, RULE_var = 14, 
		RULE_desc = 15, RULE_subscript = 16, RULE_id = 17;
	public static readonly string[] ruleNames = {
		"inline", "topExpr", "expr", "logicExpr", "unaryLogicOpPre", "negLogicalOp", 
		"numericExpr", "unaryNumCmdName", "unaryNumOpPre", "negNumOp", "binaryCmdName", 
		"divCmd", "binaryNumericOp", "varMod", "var", "desc", "subscript", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'='", "'('", "')'", "'\\neg'", "'\\lnot'", 
		"'\\lsim'", "'!'", "'{'", "'}'", "'}{'", "'\\sqrt'", "'\\'", "'d'", "'s'", 
		"'t'", "'frac'", "'\\bar'", "','", "'_{'", "'_'", null, null, null, null, 
		null, null, "'+'", "'-'", null, null, "'^'", null, "'\\pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BIN_LOGIC_OP", "CMP_OP", "AND_OP", "OR_OP", "EQ_OP", "LOGIC_CONST", "ADD_OP", 
		"SUB_OP", "MUL_OP", "DIV_OP", "EXP_OP", "NUMBER", "NUM_CONST", "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopExprContext topExpr() {
			return GetRuleContext<TopExprContext>(0);
		}
		public InlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineContext inline() {
		InlineContext _localctx = new InlineContext(Context, State);
		EnterRule(_localctx, 0, RULE_inline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 36;
				Match(T__0);
				State = 37;
				topExpr();
				State = 38;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 40;
				Match(T__1);
				State = 41;
				topExpr();
				State = 42;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_topExpr);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				var();
				State = 49;
				Match(T__3);
				State = 50;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				numericExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				logicExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryLogicOpPreContext unaryLogicOpPre() {
			return GetRuleContext<UnaryLogicOpPreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public GroupLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryParamExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BinaryParamExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryConstExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_CONST() { return GetToken(TeXpressionParser.LOGIC_CONST, 0); }
		public BinaryConstExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryConstExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_OP() { return GetToken(TeXpressionParser.CMP_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_LOGIC_OP() { return GetToken(TeXpressionParser.BIN_LOGIC_OP, 0); }
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new GroupLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 60;
				Match(T__4);
				State = 61;
				logicExpr(0);
				State = 62;
				Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64;
				unaryLogicOpPre();
				State = 65;
				logicExpr(5);
				}
				break;
			case 3:
				{
				_localctx = new BinaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67;
				numericExpr(0);
				State = 68;
				Match(CMP_OP);
				State = 69;
				numericExpr(0);
				}
				break;
			case 4:
				{
				_localctx = new BinaryParamExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71;
				var();
				}
				break;
			case 5:
				{
				_localctx = new BinaryConstExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				Match(LOGIC_CONST);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
					State = 75;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 76;
					Match(BIN_LOGIC_OP);
					State = 77;
					logicExpr(5);
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryLogicOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegLogicalOpContext negLogicalOp() {
			return GetRuleContext<NegLogicalOpContext>(0);
		}
		public UnaryLogicOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryLogicOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryLogicOpPreContext unaryLogicOpPre() {
		UnaryLogicOpPreContext _localctx = new UnaryLogicOpPreContext(Context, State);
		EnterRule(_localctx, 8, RULE_unaryLogicOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			negLogicalOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegLogicalOpContext : ParserRuleContext {
		public NegLogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negLogicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegLogicalOpContext negLogicalOp() {
		NegLogicalOpContext _localctx = new NegLogicalOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_negLogicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExprContext : ParserRuleContext {
		public NumericExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpr; } }
	 
		public NumericExprContext() { }
		public virtual void CopyFrom(NumericExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public GroupNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumCmdNameContext unaryNumCmdName() {
			return GetRuleContext<UnaryNumCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumOpPreContext unaryNumOpPre() {
			return GetRuleContext<UnaryNumOpPreContext>(0);
		}
		public UnaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TeXpressionParser.NUMBER, 0); }
		public ConstantExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdNameContext binaryCmdName() {
			return GetRuleContext<BinaryCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryNumericOpContext binaryNumericOp() {
			return GetRuleContext<BinaryNumericOpContext>(0);
		}
		public BinaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExprContext numericExpr() {
		return numericExpr(0);
	}

	private NumericExprContext numericExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExprContext _localctx = new NumericExprContext(Context, _parentState);
		NumericExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_numericExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new GroupNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 88;
				Match(T__4);
				State = 89;
				numericExpr(0);
				State = 90;
				Match(T__5);
				}
				break;
			case T__13:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92;
				unaryNumCmdName();
				State = 93;
				Match(T__10);
				State = 94;
				numericExpr(0);
				State = 95;
				Match(T__11);
				}
				break;
			case SUB_OP:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97;
				unaryNumOpPre();
				State = 98;
				numericExpr(5);
				}
				break;
			case T__14:
				{
				_localctx = new BinaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100;
				binaryCmdName();
				State = 101;
				Match(T__10);
				State = 102;
				numericExpr(0);
				State = 103;
				Match(T__12);
				State = 104;
				numericExpr(0);
				State = 105;
				Match(T__11);
				}
				break;
			case T__19:
			case LETTER:
				{
				_localctx = new ParamNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107;
				var();
				}
				break;
			case NUMBER:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
					State = 111;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 112;
					binaryNumericOp();
					State = 113;
					numericExpr(4);
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryNumCmdNameContext : ParserRuleContext {
		public UnaryNumCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumCmdNameContext unaryNumCmdName() {
		UnaryNumCmdNameContext _localctx = new UnaryNumCmdNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryNumCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegNumOpContext negNumOp() {
			return GetRuleContext<NegNumOpContext>(0);
		}
		public UnaryNumOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumOpPreContext unaryNumOpPre() {
		UnaryNumOpPreContext _localctx = new UnaryNumOpPreContext(Context, State);
		EnterRule(_localctx, 16, RULE_unaryNumOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			negNumOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegNumOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public NegNumOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negNumOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegNumOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegNumOpContext negNumOp() {
		NegNumOpContext _localctx = new NegNumOpContext(Context, State);
		EnterRule(_localctx, 18, RULE_negNumOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(SUB_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivCmdContext divCmd() {
			return GetRuleContext<DivCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			divCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivCmdContext : ParserRuleContext {
		public DivCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivCmdContext divCmd() {
		DivCmdContext _localctx = new DivCmdContext(Context, State);
		EnterRule(_localctx, 22, RULE_divCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__14);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) {
				{
				State = 129;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 132;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumericOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_OP() { return GetToken(TeXpressionParser.ADD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_OP() { return GetToken(TeXpressionParser.MUL_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(TeXpressionParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		public BinaryNumericOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumericOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumericOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumericOpContext binaryNumericOp() {
		BinaryNumericOpContext _localctx = new BinaryNumericOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_binaryNumericOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 26, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 28, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 138;
				varMod();
				State = 139;
				Match(T__10);
				State = 140;
				id();
				State = 141;
				Match(T__11);
				}
				break;
			case LETTER:
				{
				State = 143;
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 146;
				subscript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_OP() { return GetTokens(TeXpressionParser.SUB_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP(int i) {
			return GetToken(TeXpressionParser.SUB_OP, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 30, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 414466441216L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 414466441216L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 32, RULE_subscript);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				Match(T__21);
				State = 155;
				desc();
				State = 156;
				Match(T__11);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(T__22);
				State = 159;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 34, RULE_id);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(LETTER);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 163;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 6: return numericExpr_sempred((NumericExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool numericExpr_sempred(NumericExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,40,170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,45,8,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,54,8,1,1,2,1,2,3,2,58,8,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,74,8,3,1,3,1,3,1,3,5,
		3,79,8,3,10,3,12,3,82,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,110,8,
		6,1,6,1,6,1,6,1,6,5,6,116,8,6,10,6,12,6,119,9,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,3,11,131,8,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,145,8,14,1,14,3,14,148,8,14,1,15,4,15,151,
		8,15,11,15,12,15,152,1,16,1,16,1,16,1,16,1,16,1,16,3,16,161,8,16,1,17,
		1,17,5,17,165,8,17,10,17,12,17,168,9,17,1,17,0,2,6,12,18,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,0,5,1,0,7,10,1,0,16,18,1,0,30,34,3,
		0,21,21,31,31,37,38,1,0,37,38,171,0,44,1,0,0,0,2,53,1,0,0,0,4,57,1,0,0,
		0,6,73,1,0,0,0,8,83,1,0,0,0,10,85,1,0,0,0,12,109,1,0,0,0,14,120,1,0,0,
		0,16,122,1,0,0,0,18,124,1,0,0,0,20,126,1,0,0,0,22,128,1,0,0,0,24,134,1,
		0,0,0,26,136,1,0,0,0,28,144,1,0,0,0,30,150,1,0,0,0,32,160,1,0,0,0,34,162,
		1,0,0,0,36,37,5,1,0,0,37,38,3,2,1,0,38,39,5,1,0,0,39,45,1,0,0,0,40,41,
		5,2,0,0,41,42,3,2,1,0,42,43,5,3,0,0,43,45,1,0,0,0,44,36,1,0,0,0,44,40,
		1,0,0,0,45,46,1,0,0,0,46,47,5,0,0,1,47,1,1,0,0,0,48,49,3,28,14,0,49,50,
		5,4,0,0,50,51,3,4,2,0,51,54,1,0,0,0,52,54,3,4,2,0,53,48,1,0,0,0,53,52,
		1,0,0,0,54,3,1,0,0,0,55,58,3,12,6,0,56,58,3,6,3,0,57,55,1,0,0,0,57,56,
		1,0,0,0,58,5,1,0,0,0,59,60,6,3,-1,0,60,61,5,5,0,0,61,62,3,6,3,0,62,63,
		5,6,0,0,63,74,1,0,0,0,64,65,3,8,4,0,65,66,3,6,3,5,66,74,1,0,0,0,67,68,
		3,12,6,0,68,69,5,25,0,0,69,70,3,12,6,0,70,74,1,0,0,0,71,74,3,28,14,0,72,
		74,5,29,0,0,73,59,1,0,0,0,73,64,1,0,0,0,73,67,1,0,0,0,73,71,1,0,0,0,73,
		72,1,0,0,0,74,80,1,0,0,0,75,76,10,4,0,0,76,77,5,24,0,0,77,79,3,6,3,5,78,
		75,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,7,1,0,0,0,82,80,
		1,0,0,0,83,84,3,10,5,0,84,9,1,0,0,0,85,86,7,0,0,0,86,11,1,0,0,0,87,88,
		6,6,-1,0,88,89,5,5,0,0,89,90,3,12,6,0,90,91,5,6,0,0,91,110,1,0,0,0,92,
		93,3,14,7,0,93,94,5,11,0,0,94,95,3,12,6,0,95,96,5,12,0,0,96,110,1,0,0,
		0,97,98,3,16,8,0,98,99,3,12,6,5,99,110,1,0,0,0,100,101,3,20,10,0,101,102,
		5,11,0,0,102,103,3,12,6,0,103,104,5,13,0,0,104,105,3,12,6,0,105,106,5,
		12,0,0,106,110,1,0,0,0,107,110,3,28,14,0,108,110,5,35,0,0,109,87,1,0,0,
		0,109,92,1,0,0,0,109,97,1,0,0,0,109,100,1,0,0,0,109,107,1,0,0,0,109,108,
		1,0,0,0,110,117,1,0,0,0,111,112,10,3,0,0,112,113,3,24,12,0,113,114,3,12,
		6,4,114,116,1,0,0,0,115,111,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,
		118,1,0,0,0,118,13,1,0,0,0,119,117,1,0,0,0,120,121,5,14,0,0,121,15,1,0,
		0,0,122,123,3,18,9,0,123,17,1,0,0,0,124,125,5,31,0,0,125,19,1,0,0,0,126,
		127,3,22,11,0,127,21,1,0,0,0,128,130,5,15,0,0,129,131,7,1,0,0,130,129,
		1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,5,19,0,0,133,23,1,0,0,
		0,134,135,7,2,0,0,135,25,1,0,0,0,136,137,5,20,0,0,137,27,1,0,0,0,138,139,
		3,26,13,0,139,140,5,11,0,0,140,141,3,34,17,0,141,142,5,12,0,0,142,145,
		1,0,0,0,143,145,3,34,17,0,144,138,1,0,0,0,144,143,1,0,0,0,145,147,1,0,
		0,0,146,148,3,32,16,0,147,146,1,0,0,0,147,148,1,0,0,0,148,29,1,0,0,0,149,
		151,7,3,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,
		0,0,0,153,31,1,0,0,0,154,155,5,22,0,0,155,156,3,30,15,0,156,157,5,12,0,
		0,157,161,1,0,0,0,158,159,5,23,0,0,159,161,7,4,0,0,160,154,1,0,0,0,160,
		158,1,0,0,0,161,33,1,0,0,0,162,166,5,37,0,0,163,165,7,4,0,0,164,163,1,
		0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,35,1,0,0,0,168,
		166,1,0,0,0,13,44,53,57,73,80,109,117,130,144,147,152,160,166
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
