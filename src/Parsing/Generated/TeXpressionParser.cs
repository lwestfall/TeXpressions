//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/Grammars/TeXpression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		AND_OP=102, OR_OP=103, EQ_OP=104, LOGIC_CONST=105, ADD_OP=106, SUB_OP=107, 
		MUL_OP=108, DIV_OP=109, EXP_OP=110, NUM_CONST=111, LETTER=112, DIGIT=113, 
		WS=114, MISC_SKIP=115;
	public const int
		RULE_statement = 0, RULE_topExpr = 1, RULE_expr = 2, RULE_envBlock = 3, 
		RULE_envName = 4, RULE_envContent = 5, RULE_tabularContent = 6, RULE_tabularRow = 7, 
		RULE_tabularCell = 8, RULE_baseExpr = 9, RULE_logicExpr = 10, RULE_groupedLogic = 11, 
		RULE_unaryLogicOpPre = 12, RULE_negLogicalOp = 13, RULE_cmpOp = 14, RULE_numericExpr = 15, 
		RULE_groupedNum = 16, RULE_unaryNumLeftRight = 17, RULE_abs = 18, RULE_ceiling = 19, 
		RULE_floor = 20, RULE_round = 21, RULE_unaryNumOpLeft = 22, RULE_negNumOp = 23, 
		RULE_logFunc = 24, RULE_logBaseFunc = 25, RULE_trigFunc = 26, RULE_baseTrigFunc = 27, 
		RULE_binaryCmdName = 28, RULE_divCmd = 29, RULE_number = 30, RULE_varMod = 31, 
		RULE_var = 32, RULE_desc = 33, RULE_subscript = 34, RULE_id = 35;
	public static readonly string[] ruleNames = {
		"statement", "topExpr", "expr", "envBlock", "envName", "envContent", "tabularContent", 
		"tabularRow", "tabularCell", "baseExpr", "logicExpr", "groupedLogic", 
		"unaryLogicOpPre", "negLogicalOp", "cmpOp", "numericExpr", "groupedNum", 
		"unaryNumLeftRight", "abs", "ceiling", "floor", "round", "unaryNumOpLeft", 
		"negNumOp", "logFunc", "logBaseFunc", "trigFunc", "baseTrigFunc", "binaryCmdName", 
		"divCmd", "number", "varMod", "var", "desc", "subscript", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'$$'", "'\\['", "'\\]'", "'='", "'\\begin{'", 
		"'}'", "'\\end{'", "'cases'", "'\\\\'", "'&'", "'('", "')'", "'\\left('", 
		"'\\right)'", "'\\bigl('", "'\\bigr)'", "'\\Bigl('", "'\\Bigr)'", "'\\biggl('", 
		"'\\biggr)'", "'\\Biggl('", "'\\Biggr)'", "'['", "']'", "'\\left['", "'\\right]'", 
		"'\\bigl['", "'\\bigr]'", "'\\Bigl['", "'\\Bigr]'", "'\\bigg['", "'\\biggr]'", 
		"'\\Bigg['", "'\\Biggr]'", "'{'", "'\\left\\{'", "'\\right\\}'", "'\\bigl\\{'", 
		"'\\bigr\\}'", "'\\Bigl\\{'", "'\\Bigr\\}'", "'\\bigg\\{'", "'\\biggr\\}'", 
		"'\\Bigg\\{'", "'\\Biggr\\}'", "'\\neg'", "'\\lnot'", "'\\lsim'", "'!'", 
		"'<='", "'>='", "'\\leq'", "'\\geq'", "'<'", "'>'", "'\\{'", "'\\}'", 
		"'|'", "'\\left|'", "'\\right|'", "'\\big|'", "'\\bigg|'", "'\\Bigg|'", 
		"'\\lceil'", "'\\rceil'", "'\\left\\lceil'", "'\\right\\rceil'", "'\\lfloor'", 
		"'\\rfloor'", "'\\left\\lfloor'", "'\\right\\rfloor'", "'\\sqrt'", "'\\log'", 
		"'\\ln'", "'\\log_'", "'\\log_{'", "'\\arcsin'", "'\\arccos'", "'\\arctan'", 
		"'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\cot'", "'\\sec'", "'\\csc'", "'\\sin'", 
		"'\\cos'", "'\\tan'", "'\\'", "'d'", "'s'", "'t'", "'frac'", "'.'", "'\\bar'", 
		"','", "'_{'", "'_'", null, null, null, null, "'+'", "'-'", null, null, 
		"'^'", "'\\pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "AND_OP", "OR_OP", "EQ_OP", "LOGIC_CONST", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "EXP_OP", "NUM_CONST", "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopExprContext topExpr() {
			return GetRuleContext<TopExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 72;
				Match(T__0);
				State = 73;
				topExpr();
				State = 74;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 76;
				Match(T__1);
				State = 77;
				topExpr();
				State = 78;
				Match(T__2);
				}
				break;
			case T__3:
				{
				State = 80;
				Match(T__3);
				State = 81;
				topExpr();
				State = 82;
				Match(T__3);
				}
				break;
			case T__4:
				{
				State = 84;
				Match(T__4);
				State = 85;
				topExpr();
				State = 86;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 90;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_topExpr);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				var();
				State = 93;
				Match(T__6);
				State = 94;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExprContext baseExpr() {
			return GetRuleContext<BaseExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnvBlockContext envBlock() {
			return GetRuleContext<EnvBlockContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__15:
			case T__17:
			case T__19:
			case T__21:
			case T__23:
			case T__25:
			case T__27:
			case T__29:
			case T__31:
			case T__33:
			case T__35:
			case T__37:
			case T__38:
			case T__40:
			case T__42:
			case T__44:
			case T__46:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__58:
			case T__60:
			case T__61:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__68:
			case T__70:
			case T__72:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__96:
			case T__97:
			case LOGIC_CONST:
			case SUB_OP:
			case NUM_CONST:
			case LETTER:
			case DIGIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				baseExpr();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				envBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnvNameContext[] envName() {
			return GetRuleContexts<EnvNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnvNameContext envName(int i) {
			return GetRuleContext<EnvNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnvContentContext envContent() {
			return GetRuleContext<EnvContentContext>(0);
		}
		public EnvBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_envBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvBlockContext envBlock() {
		EnvBlockContext _localctx = new EnvBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_envBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__7);
			State = 104;
			envName();
			State = 105;
			Match(T__8);
			State = 106;
			envContent();
			State = 107;
			Match(T__9);
			State = 108;
			envName();
			State = 109;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvNameContext : ParserRuleContext {
		public EnvNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_envName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvNameContext envName() {
		EnvNameContext _localctx = new EnvNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_envName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TabularContentContext tabularContent() {
			return GetRuleContext<TabularContentContext>(0);
		}
		public EnvContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_envContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvContentContext envContent() {
		EnvContentContext _localctx = new EnvContentContext(Context, State);
		EnterRule(_localctx, 10, RULE_envContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			tabularContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabularContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TabularRowContext[] tabularRow() {
			return GetRuleContexts<TabularRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabularRowContext tabularRow(int i) {
			return GetRuleContext<TabularRowContext>(i);
		}
		public TabularContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabularContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabularContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabularContentContext tabularContent() {
		TabularContentContext _localctx = new TabularContentContext(Context, State);
		EnterRule(_localctx, 12, RULE_tabularContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 115;
				tabularRow();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7502621862482231552L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 996183841438383L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabularRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TabularCellContext[] tabularCell() {
			return GetRuleContexts<TabularCellContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabularCellContext tabularCell(int i) {
			return GetRuleContext<TabularCellContext>(i);
		}
		public TabularRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabularRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabularRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabularRowContext tabularRow() {
		TabularRowContext _localctx = new TabularRowContext(Context, State);
		EnterRule(_localctx, 14, RULE_tabularRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 120;
				tabularCell();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7502621862482231552L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 996183841438383L) != 0) );
			State = 125;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabularCellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TabularCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabularCell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabularCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabularCellContext tabularCell() {
		TabularCellContext _localctx = new TabularCellContext(Context, State);
		EnterRule(_localctx, 16, RULE_tabularCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			expr();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 128;
				Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public BaseExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseExprContext baseExpr() {
		BaseExprContext _localctx = new BaseExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_baseExpr);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				logicExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				numericExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryLogicOpPreContext unaryLogicOpPre() {
			return GetRuleContext<UnaryLogicOpPreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericCompareExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public NumericCompareExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupedLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedLogicContext groupedLogic() {
			return GetRuleContext<GroupedLogicContext>(0);
		}
		public GroupedLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_CONST() { return GetToken(TeXpressionParser.LOGIC_CONST, 0); }
		public ConstLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(TeXpressionParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(TeXpressionParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new GroupedLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 136;
				groupedLogic();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137;
				unaryLogicOpPre();
				State = 138;
				logicExpr(7);
				}
				break;
			case 3:
				{
				_localctx = new NumericCompareExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140;
				numericExpr(0);
				State = 141;
				cmpOp();
				State = 142;
				numericExpr(0);
				}
				break;
			case 4:
				{
				_localctx = new ParamLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				var();
				}
				break;
			case 5:
				{
				_localctx = new ConstLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145;
				Match(LOGIC_CONST);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 157;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 148;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 149;
						Match(AND_OP);
						State = 150;
						logicExpr(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 151;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 152;
						Match(OR_OP);
						State = 153;
						logicExpr(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 154;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 155;
						Match(EQ_OP);
						State = 156;
						logicExpr(5);
						}
						break;
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public GroupedLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedLogicContext groupedLogic() {
		GroupedLogicContext _localctx = new GroupedLogicContext(Context, State);
		EnterRule(_localctx, 22, RULE_groupedLogic);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				Match(T__13);
				State = 163;
				logicExpr(0);
				State = 164;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(T__15);
				State = 167;
				logicExpr(0);
				State = 168;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(T__17);
				State = 171;
				logicExpr(0);
				State = 172;
				Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				Match(T__19);
				State = 175;
				logicExpr(0);
				State = 176;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				Match(T__21);
				State = 179;
				logicExpr(0);
				State = 180;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 182;
				Match(T__23);
				State = 183;
				logicExpr(0);
				State = 184;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				Match(T__25);
				State = 187;
				logicExpr(0);
				State = 188;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 8);
				{
				State = 190;
				Match(T__27);
				State = 191;
				logicExpr(0);
				State = 192;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 9);
				{
				State = 194;
				Match(T__29);
				State = 195;
				logicExpr(0);
				State = 196;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 10);
				{
				State = 198;
				Match(T__31);
				State = 199;
				logicExpr(0);
				State = 200;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 11);
				{
				State = 202;
				Match(T__33);
				State = 203;
				logicExpr(0);
				State = 204;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 12);
				{
				State = 206;
				Match(T__35);
				State = 207;
				logicExpr(0);
				State = 208;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 13);
				{
				State = 210;
				Match(T__37);
				State = 211;
				logicExpr(0);
				State = 212;
				Match(T__8);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 14);
				{
				State = 214;
				Match(T__38);
				State = 215;
				logicExpr(0);
				State = 216;
				Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 15);
				{
				State = 218;
				Match(T__40);
				State = 219;
				logicExpr(0);
				State = 220;
				Match(T__41);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 16);
				{
				State = 222;
				Match(T__42);
				State = 223;
				logicExpr(0);
				State = 224;
				Match(T__43);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 17);
				{
				State = 226;
				Match(T__44);
				State = 227;
				logicExpr(0);
				State = 228;
				Match(T__45);
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 18);
				{
				State = 230;
				Match(T__46);
				State = 231;
				logicExpr(0);
				State = 232;
				Match(T__47);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryLogicOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegLogicalOpContext negLogicalOp() {
			return GetRuleContext<NegLogicalOpContext>(0);
		}
		public UnaryLogicOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryLogicOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryLogicOpPreContext unaryLogicOpPre() {
		UnaryLogicOpPreContext _localctx = new UnaryLogicOpPreContext(Context, State);
		EnterRule(_localctx, 24, RULE_unaryLogicOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			negLogicalOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegLogicalOpContext : ParserRuleContext {
		public NegLogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negLogicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegLogicalOpContext negLogicalOp() {
		NegLogicalOpContext _localctx = new NegLogicalOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_negLogicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 2251799813685311L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExprContext : ParserRuleContext {
		public NumericExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpr; } }
	 
		public NumericExprContext() { }
		public virtual void CopyFrom(NumericExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupedNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedNumContext groupedNum() {
			return GetRuleContext<GroupedNumContext>(0);
		}
		public GroupedNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConstNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumLeftRightContext unaryNumLeftRight() {
			return GetRuleContext<UnaryNumLeftRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumOpLeftContext unaryNumOpLeft() {
			return GetRuleContext<UnaryNumOpLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public UnaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdNameContext binaryCmdName() {
			return GetRuleContext<BinaryCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_OP() { return GetToken(TeXpressionParser.MUL_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(TeXpressionParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_OP() { return GetToken(TeXpressionParser.ADD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public BinaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrigFuncExprContext : NumericExprContext {
		public NumericExprContext arg;
		public NumericExprContext exp;
		[System.Diagnostics.DebuggerNonUserCode] public TrigFuncContext trigFunc() {
			return GetRuleContext<TrigFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseTrigFuncContext baseTrigFunc() {
			return GetRuleContext<BaseTrigFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		public TrigFuncExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumConstParamExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_CONST() { return GetToken(TeXpressionParser.NUM_CONST, 0); }
		public NumConstParamExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumConstParamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExprContext numericExpr() {
		return numericExpr(0);
	}

	private NumericExprContext numericExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExprContext _localctx = new NumericExprContext(Context, _parentState);
		NumericExprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_numericExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new GroupedNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 243;
				groupedNum();
				}
				break;
			case 2:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				unaryNumLeftRight();
				}
				break;
			case 3:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				unaryNumOpLeft();
				State = 246;
				numericExpr(12);
				}
				break;
			case 4:
				{
				_localctx = new TrigFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				trigFunc();
				State = 249;
				((TrigFuncExprContext)_localctx).arg = numericExpr(11);
				}
				break;
			case 5:
				{
				_localctx = new TrigFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251;
				baseTrigFunc();
				State = 252;
				Match(EXP_OP);
				State = 253;
				((TrigFuncExprContext)_localctx).exp = numericExpr(0);
				State = 254;
				((TrigFuncExprContext)_localctx).arg = numericExpr(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256;
				binaryCmdName();
				State = 257;
				Match(T__37);
				State = 258;
				numericExpr(0);
				State = 259;
				Match(T__8);
				State = 260;
				Match(T__37);
				State = 261;
				numericExpr(0);
				State = 262;
				Match(T__8);
				}
				break;
			case 7:
				{
				_localctx = new ParamNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				var();
				}
				break;
			case 8:
				{
				_localctx = new NumConstParamExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265;
				Match(NUM_CONST);
				}
				break;
			case 9:
				{
				_localctx = new ConstNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				number();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 284;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 269;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 270;
						Match(EXP_OP);
						State = 271;
						numericExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 272;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 273;
						Match(MUL_OP);
						State = 274;
						numericExpr(8);
						}
						break;
					case 3:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 275;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 276;
						Match(DIV_OP);
						State = 277;
						numericExpr(7);
						}
						break;
					case 4:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 278;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 279;
						Match(ADD_OP);
						State = 280;
						numericExpr(6);
						}
						break;
					case 5:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 281;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 282;
						Match(SUB_OP);
						State = 283;
						numericExpr(5);
						}
						break;
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public GroupedNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedNumContext groupedNum() {
		GroupedNumContext _localctx = new GroupedNumContext(Context, State);
		EnterRule(_localctx, 32, RULE_groupedNum);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				Match(T__13);
				State = 290;
				numericExpr(0);
				State = 291;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				Match(T__15);
				State = 294;
				numericExpr(0);
				State = 295;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				Match(T__17);
				State = 298;
				numericExpr(0);
				State = 299;
				Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301;
				Match(T__19);
				State = 302;
				numericExpr(0);
				State = 303;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 305;
				Match(T__21);
				State = 306;
				numericExpr(0);
				State = 307;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 309;
				Match(T__23);
				State = 310;
				numericExpr(0);
				State = 311;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313;
				Match(T__25);
				State = 314;
				numericExpr(0);
				State = 315;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 8);
				{
				State = 317;
				Match(T__27);
				State = 318;
				numericExpr(0);
				State = 319;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 9);
				{
				State = 321;
				Match(T__29);
				State = 322;
				numericExpr(0);
				State = 323;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 10);
				{
				State = 325;
				Match(T__31);
				State = 326;
				numericExpr(0);
				State = 327;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 11);
				{
				State = 329;
				Match(T__33);
				State = 330;
				numericExpr(0);
				State = 331;
				Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 12);
				{
				State = 333;
				Match(T__35);
				State = 334;
				numericExpr(0);
				State = 335;
				Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 13);
				{
				State = 337;
				Match(T__37);
				State = 338;
				numericExpr(0);
				State = 339;
				Match(T__8);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 14);
				{
				State = 341;
				Match(T__58);
				State = 342;
				numericExpr(0);
				State = 343;
				Match(T__59);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 15);
				{
				State = 345;
				Match(T__38);
				State = 346;
				numericExpr(0);
				State = 347;
				Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 16);
				{
				State = 349;
				Match(T__40);
				State = 350;
				numericExpr(0);
				State = 351;
				Match(T__41);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 17);
				{
				State = 353;
				Match(T__42);
				State = 354;
				numericExpr(0);
				State = 355;
				Match(T__43);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 18);
				{
				State = 357;
				Match(T__44);
				State = 358;
				numericExpr(0);
				State = 359;
				Match(T__45);
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 19);
				{
				State = 361;
				Match(T__46);
				State = 362;
				numericExpr(0);
				State = 363;
				Match(T__47);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumLeftRightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CeilingContext ceiling() {
			return GetRuleContext<CeilingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloorContext floor() {
			return GetRuleContext<FloorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundContext round() {
			return GetRuleContext<RoundContext>(0);
		}
		public UnaryNumLeftRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumLeftRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumLeftRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumLeftRightContext unaryNumLeftRight() {
		UnaryNumLeftRightContext _localctx = new UnaryNumLeftRightContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryNumLeftRight);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				abs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				ceiling();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 369;
				floor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 370;
				round();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public AbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsContext abs() {
		AbsContext _localctx = new AbsContext(Context, State);
		EnterRule(_localctx, 36, RULE_abs);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				Match(T__60);
				State = 374;
				numericExpr(0);
				State = 375;
				Match(T__60);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				Match(T__61);
				State = 378;
				numericExpr(0);
				State = 379;
				Match(T__62);
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381;
				Match(T__63);
				State = 382;
				numericExpr(0);
				State = 383;
				Match(T__63);
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 4);
				{
				State = 385;
				Match(T__64);
				State = 386;
				numericExpr(0);
				State = 387;
				Match(T__64);
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 5);
				{
				State = 389;
				Match(T__65);
				State = 390;
				numericExpr(0);
				State = 391;
				Match(T__65);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CeilingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public CeilingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ceiling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCeiling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CeilingContext ceiling() {
		CeilingContext _localctx = new CeilingContext(Context, State);
		EnterRule(_localctx, 38, RULE_ceiling);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				Match(T__66);
				State = 396;
				numericExpr(0);
				State = 397;
				Match(T__67);
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				Match(T__68);
				State = 400;
				numericExpr(0);
				State = 401;
				Match(T__69);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public FloorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorContext floor() {
		FloorContext _localctx = new FloorContext(Context, State);
		EnterRule(_localctx, 40, RULE_floor);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__70:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(T__70);
				State = 406;
				numericExpr(0);
				State = 407;
				Match(T__71);
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				Match(T__72);
				State = 410;
				numericExpr(0);
				State = 411;
				Match(T__73);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public RoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_round; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoundContext round() {
		RoundContext _localctx = new RoundContext(Context, State);
		EnterRule(_localctx, 42, RULE_round);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__70:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				Match(T__70);
				State = 416;
				numericExpr(0);
				State = 417;
				Match(T__67);
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				Match(T__72);
				State = 420;
				numericExpr(0);
				State = 421;
				Match(T__69);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumOpLeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogFuncContext logFunc() {
			return GetRuleContext<LogFuncContext>(0);
		}
		public UnaryNumOpLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumOpLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumOpLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumOpLeftContext unaryNumOpLeft() {
		UnaryNumOpLeftContext _localctx = new UnaryNumOpLeftContext(Context, State);
		EnterRule(_localctx, 44, RULE_unaryNumOpLeft);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB_OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				Match(SUB_OP);
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426;
				Match(T__74);
				}
				break;
			case T__75:
			case T__76:
			case T__77:
			case T__78:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427;
				logFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegNumOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public NegNumOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negNumOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegNumOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegNumOpContext negNumOp() {
		NegNumOpContext _localctx = new NegNumOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_negNumOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(SUB_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogFuncContext : ParserRuleContext {
		public IToken logType;
		[System.Diagnostics.DebuggerNonUserCode] public LogBaseFuncContext logBaseFunc() {
			return GetRuleContext<LogBaseFuncContext>(0);
		}
		public LogFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogFuncContext logFunc() {
		LogFuncContext _localctx = new LogFuncContext(Context, State);
		EnterRule(_localctx, 48, RULE_logFunc);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__75:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				_localctx.logType = Match(T__75);
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				_localctx.logType = Match(T__76);
				}
				break;
			case T__77:
			case T__78:
				EnterOuterAlt(_localctx, 3);
				{
				State = 434;
				logBaseFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogBaseFuncContext : ParserRuleContext {
		public IToken _DIGIT;
		public IList<IToken> _base = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public LogBaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logBaseFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogBaseFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogBaseFuncContext logBaseFunc() {
		LogBaseFuncContext _localctx = new LogBaseFuncContext(Context, State);
		EnterRule(_localctx, 50, RULE_logBaseFunc);
		int _la;
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__77:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				Match(T__77);
				State = 438;
				_localctx._DIGIT = Match(DIGIT);
				_localctx._base.Add(_localctx._DIGIT);
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439;
				Match(T__78);
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 440;
					_localctx._DIGIT = Match(DIGIT);
					_localctx._base.Add(_localctx._DIGIT);
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DIGIT );
				State = 445;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrigFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTrigFuncContext baseTrigFunc() {
			return GetRuleContext<BaseTrigFuncContext>(0);
		}
		public TrigFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrigFuncContext trigFunc() {
		TrigFuncContext _localctx = new TrigFuncContext(Context, State);
		EnterRule(_localctx, 52, RULE_trigFunc);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__88:
			case T__89:
			case T__90:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				baseTrigFunc();
				}
				break;
			case T__79:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				Match(T__79);
				}
				break;
			case T__80:
				EnterOuterAlt(_localctx, 3);
				{
				State = 450;
				Match(T__80);
				}
				break;
			case T__81:
				EnterOuterAlt(_localctx, 4);
				{
				State = 451;
				Match(T__81);
				}
				break;
			case T__82:
				EnterOuterAlt(_localctx, 5);
				{
				State = 452;
				Match(T__82);
				}
				break;
			case T__83:
				EnterOuterAlt(_localctx, 6);
				{
				State = 453;
				Match(T__83);
				}
				break;
			case T__84:
				EnterOuterAlt(_localctx, 7);
				{
				State = 454;
				Match(T__84);
				}
				break;
			case T__85:
				EnterOuterAlt(_localctx, 8);
				{
				State = 455;
				Match(T__85);
				}
				break;
			case T__86:
				EnterOuterAlt(_localctx, 9);
				{
				State = 456;
				Match(T__86);
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 10);
				{
				State = 457;
				Match(T__87);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTrigFuncContext : ParserRuleContext {
		public BaseTrigFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTrigFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTrigFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTrigFuncContext baseTrigFunc() {
		BaseTrigFuncContext _localctx = new BaseTrigFuncContext(Context, State);
		EnterRule(_localctx, 54, RULE_baseTrigFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivCmdContext divCmd() {
			return GetRuleContext<DivCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			divCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivCmdContext : ParserRuleContext {
		public DivCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivCmdContext divCmd() {
		DivCmdContext _localctx = new DivCmdContext(Context, State);
		EnterRule(_localctx, 58, RULE_divCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(T__91);
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 7L) != 0)) {
				{
				State = 465;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 468;
			Match(T__95);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 60, RULE_number);
		int _la;
		try {
			int _alt;
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DIGIT) {
					{
					{
					State = 470;
					Match(DIGIT);
					}
					}
					State = 475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 476;
				Match(T__96);
				State = 478;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 477;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 480;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 482;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 485;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 62, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(T__97);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 64, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__97:
				{
				State = 491;
				varMod();
				State = 492;
				Match(T__37);
				State = 493;
				id();
				State = 494;
				Match(T__8);
				}
				break;
			case LETTER:
				{
				State = 496;
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 499;
				subscript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_OP() { return GetTokens(TeXpressionParser.SUB_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP(int i) {
			return GetToken(TeXpressionParser.SUB_OP, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 66, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 502;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 24833L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 24833L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 68, RULE_subscript);
		int _la;
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__99:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				Match(T__99);
				State = 508;
				desc();
				State = 509;
				Match(T__8);
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511;
				Match(T__100);
				State = 512;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 70, RULE_id);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(LETTER);
			State = 519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 516;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 15: return numericExpr_sempred((NumericExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}
	private bool numericExpr_sempred(NumericExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,115,523,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,89,
		8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,98,8,1,1,2,1,2,3,2,102,8,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,117,8,6,11,6,12,6,118,
		1,7,4,7,122,8,7,11,7,12,7,123,1,7,1,7,1,8,1,8,3,8,130,8,8,1,9,1,9,3,9,
		134,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,147,
		8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,158,8,10,10,10,
		12,10,161,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,3,11,235,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,268,8,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		5,15,285,8,15,10,15,12,15,288,9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
		366,8,16,1,17,1,17,1,17,1,17,3,17,372,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,3,18,394,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,404,8,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,414,8,20,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,3,21,424,8,21,1,22,1,22,1,22,3,22,429,8,22,1,23,
		1,23,1,24,1,24,1,24,3,24,436,8,24,1,25,1,25,1,25,1,25,4,25,442,8,25,11,
		25,12,25,443,1,25,3,25,447,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,3,26,459,8,26,1,27,1,27,1,28,1,28,1,29,1,29,3,29,467,8,29,1,
		29,1,29,1,30,5,30,472,8,30,10,30,12,30,475,9,30,1,30,1,30,4,30,479,8,30,
		11,30,12,30,480,1,30,4,30,484,8,30,11,30,12,30,485,3,30,488,8,30,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,498,8,32,1,32,3,32,501,8,32,1,
		33,4,33,504,8,33,11,33,12,33,505,1,34,1,34,1,34,1,34,1,34,1,34,3,34,514,
		8,34,1,35,1,35,5,35,518,8,35,10,35,12,35,521,9,35,1,35,0,2,20,30,36,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,0,6,1,0,49,52,2,0,53,58,104,104,1,0,89,91,
		1,0,93,95,3,0,99,99,107,107,112,113,1,0,112,113,585,0,88,1,0,0,0,2,97,
		1,0,0,0,4,101,1,0,0,0,6,103,1,0,0,0,8,111,1,0,0,0,10,113,1,0,0,0,12,116,
		1,0,0,0,14,121,1,0,0,0,16,127,1,0,0,0,18,133,1,0,0,0,20,146,1,0,0,0,22,
		234,1,0,0,0,24,236,1,0,0,0,26,238,1,0,0,0,28,240,1,0,0,0,30,267,1,0,0,
		0,32,365,1,0,0,0,34,371,1,0,0,0,36,393,1,0,0,0,38,403,1,0,0,0,40,413,1,
		0,0,0,42,423,1,0,0,0,44,428,1,0,0,0,46,430,1,0,0,0,48,435,1,0,0,0,50,446,
		1,0,0,0,52,458,1,0,0,0,54,460,1,0,0,0,56,462,1,0,0,0,58,464,1,0,0,0,60,
		487,1,0,0,0,62,489,1,0,0,0,64,497,1,0,0,0,66,503,1,0,0,0,68,513,1,0,0,
		0,70,515,1,0,0,0,72,73,5,1,0,0,73,74,3,2,1,0,74,75,5,1,0,0,75,89,1,0,0,
		0,76,77,5,2,0,0,77,78,3,2,1,0,78,79,5,3,0,0,79,89,1,0,0,0,80,81,5,4,0,
		0,81,82,3,2,1,0,82,83,5,4,0,0,83,89,1,0,0,0,84,85,5,5,0,0,85,86,3,2,1,
		0,86,87,5,6,0,0,87,89,1,0,0,0,88,72,1,0,0,0,88,76,1,0,0,0,88,80,1,0,0,
		0,88,84,1,0,0,0,89,90,1,0,0,0,90,91,5,0,0,1,91,1,1,0,0,0,92,93,3,64,32,
		0,93,94,5,7,0,0,94,95,3,4,2,0,95,98,1,0,0,0,96,98,3,4,2,0,97,92,1,0,0,
		0,97,96,1,0,0,0,98,3,1,0,0,0,99,102,3,18,9,0,100,102,3,6,3,0,101,99,1,
		0,0,0,101,100,1,0,0,0,102,5,1,0,0,0,103,104,5,8,0,0,104,105,3,8,4,0,105,
		106,5,9,0,0,106,107,3,10,5,0,107,108,5,10,0,0,108,109,3,8,4,0,109,110,
		5,9,0,0,110,7,1,0,0,0,111,112,5,11,0,0,112,9,1,0,0,0,113,114,3,12,6,0,
		114,11,1,0,0,0,115,117,3,14,7,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,
		1,0,0,0,118,119,1,0,0,0,119,13,1,0,0,0,120,122,3,16,8,0,121,120,1,0,0,
		0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,
		126,5,12,0,0,126,15,1,0,0,0,127,129,3,4,2,0,128,130,5,13,0,0,129,128,1,
		0,0,0,129,130,1,0,0,0,130,17,1,0,0,0,131,134,3,20,10,0,132,134,3,30,15,
		0,133,131,1,0,0,0,133,132,1,0,0,0,134,19,1,0,0,0,135,136,6,10,-1,0,136,
		147,3,22,11,0,137,138,3,24,12,0,138,139,3,20,10,7,139,147,1,0,0,0,140,
		141,3,30,15,0,141,142,3,28,14,0,142,143,3,30,15,0,143,147,1,0,0,0,144,
		147,3,64,32,0,145,147,5,105,0,0,146,135,1,0,0,0,146,137,1,0,0,0,146,140,
		1,0,0,0,146,144,1,0,0,0,146,145,1,0,0,0,147,159,1,0,0,0,148,149,10,6,0,
		0,149,150,5,102,0,0,150,158,3,20,10,7,151,152,10,5,0,0,152,153,5,103,0,
		0,153,158,3,20,10,6,154,155,10,4,0,0,155,156,5,104,0,0,156,158,3,20,10,
		5,157,148,1,0,0,0,157,151,1,0,0,0,157,154,1,0,0,0,158,161,1,0,0,0,159,
		157,1,0,0,0,159,160,1,0,0,0,160,21,1,0,0,0,161,159,1,0,0,0,162,163,5,14,
		0,0,163,164,3,20,10,0,164,165,5,15,0,0,165,235,1,0,0,0,166,167,5,16,0,
		0,167,168,3,20,10,0,168,169,5,17,0,0,169,235,1,0,0,0,170,171,5,18,0,0,
		171,172,3,20,10,0,172,173,5,19,0,0,173,235,1,0,0,0,174,175,5,20,0,0,175,
		176,3,20,10,0,176,177,5,21,0,0,177,235,1,0,0,0,178,179,5,22,0,0,179,180,
		3,20,10,0,180,181,5,23,0,0,181,235,1,0,0,0,182,183,5,24,0,0,183,184,3,
		20,10,0,184,185,5,25,0,0,185,235,1,0,0,0,186,187,5,26,0,0,187,188,3,20,
		10,0,188,189,5,27,0,0,189,235,1,0,0,0,190,191,5,28,0,0,191,192,3,20,10,
		0,192,193,5,29,0,0,193,235,1,0,0,0,194,195,5,30,0,0,195,196,3,20,10,0,
		196,197,5,31,0,0,197,235,1,0,0,0,198,199,5,32,0,0,199,200,3,20,10,0,200,
		201,5,33,0,0,201,235,1,0,0,0,202,203,5,34,0,0,203,204,3,20,10,0,204,205,
		5,35,0,0,205,235,1,0,0,0,206,207,5,36,0,0,207,208,3,20,10,0,208,209,5,
		37,0,0,209,235,1,0,0,0,210,211,5,38,0,0,211,212,3,20,10,0,212,213,5,9,
		0,0,213,235,1,0,0,0,214,215,5,39,0,0,215,216,3,20,10,0,216,217,5,40,0,
		0,217,235,1,0,0,0,218,219,5,41,0,0,219,220,3,20,10,0,220,221,5,42,0,0,
		221,235,1,0,0,0,222,223,5,43,0,0,223,224,3,20,10,0,224,225,5,44,0,0,225,
		235,1,0,0,0,226,227,5,45,0,0,227,228,3,20,10,0,228,229,5,46,0,0,229,235,
		1,0,0,0,230,231,5,47,0,0,231,232,3,20,10,0,232,233,5,48,0,0,233,235,1,
		0,0,0,234,162,1,0,0,0,234,166,1,0,0,0,234,170,1,0,0,0,234,174,1,0,0,0,
		234,178,1,0,0,0,234,182,1,0,0,0,234,186,1,0,0,0,234,190,1,0,0,0,234,194,
		1,0,0,0,234,198,1,0,0,0,234,202,1,0,0,0,234,206,1,0,0,0,234,210,1,0,0,
		0,234,214,1,0,0,0,234,218,1,0,0,0,234,222,1,0,0,0,234,226,1,0,0,0,234,
		230,1,0,0,0,235,23,1,0,0,0,236,237,3,26,13,0,237,25,1,0,0,0,238,239,7,
		0,0,0,239,27,1,0,0,0,240,241,7,1,0,0,241,29,1,0,0,0,242,243,6,15,-1,0,
		243,268,3,32,16,0,244,268,3,34,17,0,245,246,3,44,22,0,246,247,3,30,15,
		12,247,268,1,0,0,0,248,249,3,52,26,0,249,250,3,30,15,11,250,268,1,0,0,
		0,251,252,3,54,27,0,252,253,5,110,0,0,253,254,3,30,15,0,254,255,3,30,15,
		10,255,268,1,0,0,0,256,257,3,56,28,0,257,258,5,38,0,0,258,259,3,30,15,
		0,259,260,5,9,0,0,260,261,5,38,0,0,261,262,3,30,15,0,262,263,5,9,0,0,263,
		268,1,0,0,0,264,268,3,64,32,0,265,268,5,111,0,0,266,268,3,60,30,0,267,
		242,1,0,0,0,267,244,1,0,0,0,267,245,1,0,0,0,267,248,1,0,0,0,267,251,1,
		0,0,0,267,256,1,0,0,0,267,264,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,0,
		268,286,1,0,0,0,269,270,10,8,0,0,270,271,5,110,0,0,271,285,3,30,15,8,272,
		273,10,7,0,0,273,274,5,108,0,0,274,285,3,30,15,8,275,276,10,6,0,0,276,
		277,5,109,0,0,277,285,3,30,15,7,278,279,10,5,0,0,279,280,5,106,0,0,280,
		285,3,30,15,6,281,282,10,4,0,0,282,283,5,107,0,0,283,285,3,30,15,5,284,
		269,1,0,0,0,284,272,1,0,0,0,284,275,1,0,0,0,284,278,1,0,0,0,284,281,1,
		0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,31,1,0,0,0,288,
		286,1,0,0,0,289,290,5,14,0,0,290,291,3,30,15,0,291,292,5,15,0,0,292,366,
		1,0,0,0,293,294,5,16,0,0,294,295,3,30,15,0,295,296,5,17,0,0,296,366,1,
		0,0,0,297,298,5,18,0,0,298,299,3,30,15,0,299,300,5,19,0,0,300,366,1,0,
		0,0,301,302,5,20,0,0,302,303,3,30,15,0,303,304,5,21,0,0,304,366,1,0,0,
		0,305,306,5,22,0,0,306,307,3,30,15,0,307,308,5,23,0,0,308,366,1,0,0,0,
		309,310,5,24,0,0,310,311,3,30,15,0,311,312,5,25,0,0,312,366,1,0,0,0,313,
		314,5,26,0,0,314,315,3,30,15,0,315,316,5,27,0,0,316,366,1,0,0,0,317,318,
		5,28,0,0,318,319,3,30,15,0,319,320,5,29,0,0,320,366,1,0,0,0,321,322,5,
		30,0,0,322,323,3,30,15,0,323,324,5,31,0,0,324,366,1,0,0,0,325,326,5,32,
		0,0,326,327,3,30,15,0,327,328,5,33,0,0,328,366,1,0,0,0,329,330,5,34,0,
		0,330,331,3,30,15,0,331,332,5,35,0,0,332,366,1,0,0,0,333,334,5,36,0,0,
		334,335,3,30,15,0,335,336,5,37,0,0,336,366,1,0,0,0,337,338,5,38,0,0,338,
		339,3,30,15,0,339,340,5,9,0,0,340,366,1,0,0,0,341,342,5,59,0,0,342,343,
		3,30,15,0,343,344,5,60,0,0,344,366,1,0,0,0,345,346,5,39,0,0,346,347,3,
		30,15,0,347,348,5,40,0,0,348,366,1,0,0,0,349,350,5,41,0,0,350,351,3,30,
		15,0,351,352,5,42,0,0,352,366,1,0,0,0,353,354,5,43,0,0,354,355,3,30,15,
		0,355,356,5,44,0,0,356,366,1,0,0,0,357,358,5,45,0,0,358,359,3,30,15,0,
		359,360,5,46,0,0,360,366,1,0,0,0,361,362,5,47,0,0,362,363,3,30,15,0,363,
		364,5,48,0,0,364,366,1,0,0,0,365,289,1,0,0,0,365,293,1,0,0,0,365,297,1,
		0,0,0,365,301,1,0,0,0,365,305,1,0,0,0,365,309,1,0,0,0,365,313,1,0,0,0,
		365,317,1,0,0,0,365,321,1,0,0,0,365,325,1,0,0,0,365,329,1,0,0,0,365,333,
		1,0,0,0,365,337,1,0,0,0,365,341,1,0,0,0,365,345,1,0,0,0,365,349,1,0,0,
		0,365,353,1,0,0,0,365,357,1,0,0,0,365,361,1,0,0,0,366,33,1,0,0,0,367,372,
		3,36,18,0,368,372,3,38,19,0,369,372,3,40,20,0,370,372,3,42,21,0,371,367,
		1,0,0,0,371,368,1,0,0,0,371,369,1,0,0,0,371,370,1,0,0,0,372,35,1,0,0,0,
		373,374,5,61,0,0,374,375,3,30,15,0,375,376,5,61,0,0,376,394,1,0,0,0,377,
		378,5,62,0,0,378,379,3,30,15,0,379,380,5,63,0,0,380,394,1,0,0,0,381,382,
		5,64,0,0,382,383,3,30,15,0,383,384,5,64,0,0,384,394,1,0,0,0,385,386,5,
		65,0,0,386,387,3,30,15,0,387,388,5,65,0,0,388,394,1,0,0,0,389,390,5,66,
		0,0,390,391,3,30,15,0,391,392,5,66,0,0,392,394,1,0,0,0,393,373,1,0,0,0,
		393,377,1,0,0,0,393,381,1,0,0,0,393,385,1,0,0,0,393,389,1,0,0,0,394,37,
		1,0,0,0,395,396,5,67,0,0,396,397,3,30,15,0,397,398,5,68,0,0,398,404,1,
		0,0,0,399,400,5,69,0,0,400,401,3,30,15,0,401,402,5,70,0,0,402,404,1,0,
		0,0,403,395,1,0,0,0,403,399,1,0,0,0,404,39,1,0,0,0,405,406,5,71,0,0,406,
		407,3,30,15,0,407,408,5,72,0,0,408,414,1,0,0,0,409,410,5,73,0,0,410,411,
		3,30,15,0,411,412,5,74,0,0,412,414,1,0,0,0,413,405,1,0,0,0,413,409,1,0,
		0,0,414,41,1,0,0,0,415,416,5,71,0,0,416,417,3,30,15,0,417,418,5,68,0,0,
		418,424,1,0,0,0,419,420,5,73,0,0,420,421,3,30,15,0,421,422,5,70,0,0,422,
		424,1,0,0,0,423,415,1,0,0,0,423,419,1,0,0,0,424,43,1,0,0,0,425,429,5,107,
		0,0,426,429,5,75,0,0,427,429,3,48,24,0,428,425,1,0,0,0,428,426,1,0,0,0,
		428,427,1,0,0,0,429,45,1,0,0,0,430,431,5,107,0,0,431,47,1,0,0,0,432,436,
		5,76,0,0,433,436,5,77,0,0,434,436,3,50,25,0,435,432,1,0,0,0,435,433,1,
		0,0,0,435,434,1,0,0,0,436,49,1,0,0,0,437,438,5,78,0,0,438,447,5,113,0,
		0,439,441,5,79,0,0,440,442,5,113,0,0,441,440,1,0,0,0,442,443,1,0,0,0,443,
		441,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,447,5,9,0,0,446,437,1,
		0,0,0,446,439,1,0,0,0,447,51,1,0,0,0,448,459,3,54,27,0,449,459,5,80,0,
		0,450,459,5,81,0,0,451,459,5,82,0,0,452,459,5,83,0,0,453,459,5,84,0,0,
		454,459,5,85,0,0,455,459,5,86,0,0,456,459,5,87,0,0,457,459,5,88,0,0,458,
		448,1,0,0,0,458,449,1,0,0,0,458,450,1,0,0,0,458,451,1,0,0,0,458,452,1,
		0,0,0,458,453,1,0,0,0,458,454,1,0,0,0,458,455,1,0,0,0,458,456,1,0,0,0,
		458,457,1,0,0,0,459,53,1,0,0,0,460,461,7,2,0,0,461,55,1,0,0,0,462,463,
		3,58,29,0,463,57,1,0,0,0,464,466,5,92,0,0,465,467,7,3,0,0,466,465,1,0,
		0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,469,5,96,0,0,469,59,1,0,0,0,470,
		472,5,113,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,
		1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,478,5,97,0,0,477,479,5,113,
		0,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,
		488,1,0,0,0,482,484,5,113,0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,483,
		1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,473,1,0,0,0,487,483,1,0,0,
		0,488,61,1,0,0,0,489,490,5,98,0,0,490,63,1,0,0,0,491,492,3,62,31,0,492,
		493,5,38,0,0,493,494,3,70,35,0,494,495,5,9,0,0,495,498,1,0,0,0,496,498,
		3,70,35,0,497,491,1,0,0,0,497,496,1,0,0,0,498,500,1,0,0,0,499,501,3,68,
		34,0,500,499,1,0,0,0,500,501,1,0,0,0,501,65,1,0,0,0,502,504,7,4,0,0,503,
		502,1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,67,1,0,
		0,0,507,508,5,100,0,0,508,509,3,66,33,0,509,510,5,9,0,0,510,514,1,0,0,
		0,511,512,5,101,0,0,512,514,7,5,0,0,513,507,1,0,0,0,513,511,1,0,0,0,514,
		69,1,0,0,0,515,519,5,112,0,0,516,518,7,5,0,0,517,516,1,0,0,0,518,521,1,
		0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,71,1,0,0,0,521,519,1,0,0,0,35,
		88,97,101,118,123,129,133,146,157,159,234,267,284,286,365,371,393,403,
		413,423,428,435,443,446,458,466,473,480,485,487,497,500,505,513,519
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
