//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/TeXpression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, AND_OP=64, OR_OP=65, EQ_OP=66, 
		LOGIC_CONST=67, ADD_OP=68, SUB_OP=69, MUL_OP=70, DIV_OP=71, EXP_OP=72, 
		NUMBER=73, NUM_CONST=74, LETTER=75, DIGIT=76, WS=77, MISC_SKIP=78;
	public const int
		RULE_inline = 0, RULE_topExpr = 1, RULE_expr = 2, RULE_logicExpr = 3, 
		RULE_groupedLogic = 4, RULE_unaryLogicOpPre = 5, RULE_negLogicalOp = 6, 
		RULE_cmpOp = 7, RULE_numericExpr = 8, RULE_groupedNum = 9, RULE_unaryNumCmdName = 10, 
		RULE_unaryNumOpPre = 11, RULE_negNumOp = 12, RULE_binaryCmdName = 13, 
		RULE_divCmd = 14, RULE_varMod = 15, RULE_var = 16, RULE_desc = 17, RULE_subscript = 18, 
		RULE_id = 19;
	public static readonly string[] ruleNames = {
		"inline", "topExpr", "expr", "logicExpr", "groupedLogic", "unaryLogicOpPre", 
		"negLogicalOp", "cmpOp", "numericExpr", "groupedNum", "unaryNumCmdName", 
		"unaryNumOpPre", "negNumOp", "binaryCmdName", "divCmd", "varMod", "var", 
		"desc", "subscript", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'='", "'('", "')'", "'\\left('", "'\\right)'", 
		"'\\bigl('", "'\\bigr)'", "'\\Bigl('", "'\\Bigr)'", "'\\biggl('", "'\\biggr)'", 
		"'\\Biggl('", "'\\Biggr)'", "'['", "']'", "'\\left['", "'\\right]'", "'\\bigl['", 
		"'\\bigr]'", "'\\Bigl['", "'\\Bigr]'", "'\\bigg['", "'\\biggr]'", "'\\Bigg['", 
		"'\\Biggr]'", "'\\{'", "'\\}'", "'\\left\\{'", "'\\right\\}'", "'\\bigl\\{'", 
		"'\\bigr\\}'", "'\\Bigl\\{'", "'\\Bigr\\}'", "'\\bigg\\{'", "'\\biggr\\}'", 
		"'\\Bigg\\{'", "'\\Biggr\\}'", "'\\neg'", "'\\lnot'", "'\\lsim'", "'!'", 
		"'<='", "'>='", "'\\leq'", "'\\geq'", "'<'", "'>'", "'{'", "'}'", "'}{'", 
		"'\\sqrt'", "'\\'", "'d'", "'s'", "'t'", "'frac'", "'\\bar'", "','", "'_{'", 
		"'_'", null, null, null, null, "'+'", "'-'", null, null, "'^'", null, 
		"'\\pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "AND_OP", "OR_OP", "EQ_OP", "LOGIC_CONST", "ADD_OP", 
		"SUB_OP", "MUL_OP", "DIV_OP", "EXP_OP", "NUMBER", "NUM_CONST", "LETTER", 
		"DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TeXpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TeXpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TeXpressionParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopExprContext topExpr() {
			return GetRuleContext<TopExprContext>(0);
		}
		public InlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineContext inline() {
		InlineContext _localctx = new InlineContext(Context, State);
		EnterRule(_localctx, 0, RULE_inline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 40;
				Match(T__0);
				State = 41;
				topExpr();
				State = 42;
				Match(T__0);
				}
				break;
			case T__1:
				{
				State = 44;
				Match(T__1);
				State = 45;
				topExpr();
				State = 46;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TopExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopExprContext topExpr() {
		TopExprContext _localctx = new TopExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_topExpr);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				var();
				State = 53;
				Match(T__3);
				State = 54;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				logicExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				numericExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryLogicOpPreContext unaryLogicOpPre() {
			return GetRuleContext<UnaryLogicOpPreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericCompareExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public NumericCompareExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupedLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedLogicContext groupedLogic() {
			return GetRuleContext<GroupedLogicContext>(0);
		}
		public GroupedLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_CONST() { return GetToken(TeXpressionParser.LOGIC_CONST, 0); }
		public ConstLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(TeXpressionParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(TeXpressionParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new GroupedLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 64;
				groupedLogic();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65;
				unaryLogicOpPre();
				State = 66;
				logicExpr(7);
				}
				break;
			case 3:
				{
				_localctx = new NumericCompareExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68;
				numericExpr(0);
				State = 69;
				cmpOp();
				State = 70;
				numericExpr(0);
				}
				break;
			case 4:
				{
				_localctx = new ParamLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				var();
				}
				break;
			case 5:
				{
				_localctx = new ConstLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73;
				Match(LOGIC_CONST);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 76;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 77;
						Match(AND_OP);
						State = 78;
						logicExpr(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 79;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 80;
						Match(OR_OP);
						State = 81;
						logicExpr(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
						State = 82;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 83;
						Match(EQ_OP);
						State = 84;
						logicExpr(5);
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public GroupedLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedLogicContext groupedLogic() {
		GroupedLogicContext _localctx = new GroupedLogicContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupedLogic);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(T__4);
				State = 91;
				logicExpr(0);
				State = 92;
				Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(T__6);
				State = 95;
				logicExpr(0);
				State = 96;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(T__8);
				State = 99;
				logicExpr(0);
				State = 100;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				Match(T__10);
				State = 103;
				logicExpr(0);
				State = 104;
				Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				Match(T__12);
				State = 107;
				logicExpr(0);
				State = 108;
				Match(T__13);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 6);
				{
				State = 110;
				Match(T__14);
				State = 111;
				logicExpr(0);
				State = 112;
				Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 7);
				{
				State = 114;
				Match(T__16);
				State = 115;
				logicExpr(0);
				State = 116;
				Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 8);
				{
				State = 118;
				Match(T__18);
				State = 119;
				logicExpr(0);
				State = 120;
				Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 9);
				{
				State = 122;
				Match(T__20);
				State = 123;
				logicExpr(0);
				State = 124;
				Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 10);
				{
				State = 126;
				Match(T__22);
				State = 127;
				logicExpr(0);
				State = 128;
				Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 11);
				{
				State = 130;
				Match(T__24);
				State = 131;
				logicExpr(0);
				State = 132;
				Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 12);
				{
				State = 134;
				Match(T__26);
				State = 135;
				logicExpr(0);
				State = 136;
				Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 13);
				{
				State = 138;
				Match(T__28);
				State = 139;
				logicExpr(0);
				State = 140;
				Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 14);
				{
				State = 142;
				Match(T__30);
				State = 143;
				logicExpr(0);
				State = 144;
				Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 15);
				{
				State = 146;
				Match(T__32);
				State = 147;
				logicExpr(0);
				State = 148;
				Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 16);
				{
				State = 150;
				Match(T__34);
				State = 151;
				logicExpr(0);
				State = 152;
				Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 17);
				{
				State = 154;
				Match(T__36);
				State = 155;
				logicExpr(0);
				State = 156;
				Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 18);
				{
				State = 158;
				Match(T__38);
				State = 159;
				logicExpr(0);
				State = 160;
				Match(T__39);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryLogicOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegLogicalOpContext negLogicalOp() {
			return GetRuleContext<NegLogicalOpContext>(0);
		}
		public UnaryLogicOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryLogicOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryLogicOpPreContext unaryLogicOpPre() {
		UnaryLogicOpPreContext _localctx = new UnaryLogicOpPreContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryLogicOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			negLogicalOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegLogicalOpContext : ParserRuleContext {
		public NegLogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negLogicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegLogicalOpContext negLogicalOp() {
		NegLogicalOpContext _localctx = new NegLogicalOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_negLogicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(TeXpressionParser.EQ_OP, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 2097215L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExprContext : ParserRuleContext {
		public NumericExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpr; } }
	 
		public NumericExprContext() { }
		public virtual void CopyFrom(NumericExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupedNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupedNumContext groupedNum() {
			return GetRuleContext<GroupedNumContext>(0);
		}
		public GroupedNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ParamNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TeXpressionParser.NUMBER, 0); }
		public ConstNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumCmdNameContext unaryNumCmdName() {
			return GetRuleContext<UnaryNumCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryNumOpPreContext unaryNumOpPre() {
			return GetRuleContext<UnaryNumOpPreContext>(0);
		}
		public UnaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumExprContext : NumericExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryCmdNameContext binaryCmdName() {
			return GetRuleContext<BinaryCmdNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext[] numericExpr() {
			return GetRuleContexts<NumericExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr(int i) {
			return GetRuleContext<NumericExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OP() { return GetToken(TeXpressionParser.EXP_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_OP() { return GetToken(TeXpressionParser.MUL_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(TeXpressionParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_OP() { return GetToken(TeXpressionParser.ADD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public BinaryNumExprContext(NumericExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExprContext numericExpr() {
		return numericExpr(0);
	}

	private NumericExprContext numericExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumericExprContext _localctx = new NumericExprContext(Context, _parentState);
		NumericExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_numericExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__6:
			case T__8:
			case T__10:
			case T__12:
			case T__14:
			case T__16:
			case T__18:
			case T__20:
			case T__22:
			case T__24:
			case T__26:
			case T__28:
			case T__30:
			case T__32:
			case T__34:
			case T__36:
			case T__38:
				{
				_localctx = new GroupedNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 171;
				groupedNum();
				}
				break;
			case T__53:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				unaryNumCmdName();
				State = 173;
				Match(T__50);
				State = 174;
				numericExpr(0);
				State = 175;
				Match(T__51);
				}
				break;
			case SUB_OP:
				{
				_localctx = new UnaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177;
				unaryNumOpPre();
				State = 178;
				numericExpr(9);
				}
				break;
			case T__54:
				{
				_localctx = new BinaryNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				binaryCmdName();
				State = 181;
				Match(T__50);
				State = 182;
				numericExpr(0);
				State = 183;
				Match(T__52);
				State = 184;
				numericExpr(0);
				State = 185;
				Match(T__51);
				}
				break;
			case T__59:
			case LETTER:
				{
				_localctx = new ParamNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				var();
				}
				break;
			case NUMBER:
				{
				_localctx = new ConstNumExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 206;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 191;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 192;
						Match(EXP_OP);
						State = 193;
						numericExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 194;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 195;
						Match(MUL_OP);
						State = 196;
						numericExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 197;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 198;
						Match(DIV_OP);
						State = 199;
						numericExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 200;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 201;
						Match(ADD_OP);
						State = 202;
						numericExpr(5);
						}
						break;
					case 5:
						{
						_localctx = new BinaryNumExprContext(new NumericExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numericExpr);
						State = 203;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 204;
						Match(SUB_OP);
						State = 205;
						numericExpr(4);
						}
						break;
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupedNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExprContext numericExpr() {
			return GetRuleContext<NumericExprContext>(0);
		}
		public GroupedNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedNumContext groupedNum() {
		GroupedNumContext _localctx = new GroupedNumContext(Context, State);
		EnterRule(_localctx, 18, RULE_groupedNum);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				Match(T__4);
				State = 212;
				numericExpr(0);
				State = 213;
				Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(T__6);
				State = 216;
				numericExpr(0);
				State = 217;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				Match(T__8);
				State = 220;
				numericExpr(0);
				State = 221;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				Match(T__10);
				State = 224;
				numericExpr(0);
				State = 225;
				Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				Match(T__12);
				State = 228;
				numericExpr(0);
				State = 229;
				Match(T__13);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 6);
				{
				State = 231;
				Match(T__14);
				State = 232;
				numericExpr(0);
				State = 233;
				Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 7);
				{
				State = 235;
				Match(T__16);
				State = 236;
				numericExpr(0);
				State = 237;
				Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 8);
				{
				State = 239;
				Match(T__18);
				State = 240;
				numericExpr(0);
				State = 241;
				Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243;
				Match(T__20);
				State = 244;
				numericExpr(0);
				State = 245;
				Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 10);
				{
				State = 247;
				Match(T__22);
				State = 248;
				numericExpr(0);
				State = 249;
				Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 11);
				{
				State = 251;
				Match(T__24);
				State = 252;
				numericExpr(0);
				State = 253;
				Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 12);
				{
				State = 255;
				Match(T__26);
				State = 256;
				numericExpr(0);
				State = 257;
				Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 13);
				{
				State = 259;
				Match(T__28);
				State = 260;
				numericExpr(0);
				State = 261;
				Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 14);
				{
				State = 263;
				Match(T__30);
				State = 264;
				numericExpr(0);
				State = 265;
				Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 15);
				{
				State = 267;
				Match(T__32);
				State = 268;
				numericExpr(0);
				State = 269;
				Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 16);
				{
				State = 271;
				Match(T__34);
				State = 272;
				numericExpr(0);
				State = 273;
				Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 17);
				{
				State = 275;
				Match(T__36);
				State = 276;
				numericExpr(0);
				State = 277;
				Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 18);
				{
				State = 279;
				Match(T__38);
				State = 280;
				numericExpr(0);
				State = 281;
				Match(T__39);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumCmdNameContext : ParserRuleContext {
		public UnaryNumCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumCmdNameContext unaryNumCmdName() {
		UnaryNumCmdNameContext _localctx = new UnaryNumCmdNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_unaryNumCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__53);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryNumOpPreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegNumOpContext negNumOp() {
			return GetRuleContext<NegNumOpContext>(0);
		}
		public UnaryNumOpPreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryNumOpPre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumOpPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryNumOpPreContext unaryNumOpPre() {
		UnaryNumOpPreContext _localctx = new UnaryNumOpPreContext(Context, State);
		EnterRule(_localctx, 22, RULE_unaryNumOpPre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			negNumOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegNumOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP() { return GetToken(TeXpressionParser.SUB_OP, 0); }
		public NegNumOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negNumOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegNumOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegNumOpContext negNumOp() {
		NegNumOpContext _localctx = new NegNumOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_negNumOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(SUB_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryCmdNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivCmdContext divCmd() {
			return GetRuleContext<DivCmdContext>(0);
		}
		public BinaryCmdNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryCmdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCmdName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryCmdNameContext binaryCmdName() {
		BinaryCmdNameContext _localctx = new BinaryCmdNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_binaryCmdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			divCmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivCmdContext : ParserRuleContext {
		public DivCmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divCmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivCmdContext divCmd() {
		DivCmdContext _localctx = new DivCmdContext(Context, State);
		EnterRule(_localctx, 28, RULE_divCmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__54);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 504403158265495552L) != 0)) {
				{
				State = 294;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504403158265495552L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 297;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModContext : ParserRuleContext {
		public VarModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModContext varMod() {
		VarModContext _localctx = new VarModContext(Context, State);
		EnterRule(_localctx, 30, RULE_varMod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModContext varMod() {
			return GetRuleContext<VarModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 32, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__59:
				{
				State = 301;
				varMod();
				State = 302;
				Match(T__50);
				State = 303;
				id();
				State = 304;
				Match(T__51);
				}
				break;
			case LETTER:
				{
				State = 306;
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 309;
				subscript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUB_OP() { return GetTokens(TeXpressionParser.SUB_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_OP(int i) {
			return GetToken(TeXpressionParser.SUB_OP, i);
		}
		public DescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescContext desc() {
		DescContext _localctx = new DescContext(Context, State);
		EnterRule(_localctx, 34, RULE_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 312;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 49409L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 49409L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescContext desc() {
			return GetRuleContext<DescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TeXpressionParser.DIGIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(TeXpressionParser.LETTER, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 36, RULE_subscript);
		int _la;
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				Match(T__61);
				State = 318;
				desc();
				State = 319;
				Match(T__51);
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(T__62);
				State = 322;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(TeXpressionParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(TeXpressionParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(TeXpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(TeXpressionParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITeXpressionVisitor<TResult> typedVisitor = visitor as ITeXpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 38, RULE_id);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(LETTER);
			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTER || _la==DIGIT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 8: return numericExpr_sempred((NumericExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}
	private bool numericExpr_sempred(NumericExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,78,333,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,3,0,49,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,58,8,1,1,2,1,2,
		3,2,62,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,75,8,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,86,8,3,10,3,12,3,89,9,3,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
		4,163,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,190,8,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,207,8,8,10,8,12,8,210,9,
		8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,3,9,284,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
		3,14,296,8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,308,
		8,16,1,16,3,16,311,8,16,1,17,4,17,314,8,17,11,17,12,17,315,1,18,1,18,1,
		18,1,18,1,18,1,18,3,18,324,8,18,1,19,1,19,5,19,328,8,19,10,19,12,19,331,
		9,19,1,19,0,2,6,16,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,0,5,1,0,41,44,2,0,45,50,66,66,1,0,56,58,3,0,61,61,69,69,75,76,1,
		0,75,76,372,0,48,1,0,0,0,2,57,1,0,0,0,4,61,1,0,0,0,6,74,1,0,0,0,8,162,
		1,0,0,0,10,164,1,0,0,0,12,166,1,0,0,0,14,168,1,0,0,0,16,189,1,0,0,0,18,
		283,1,0,0,0,20,285,1,0,0,0,22,287,1,0,0,0,24,289,1,0,0,0,26,291,1,0,0,
		0,28,293,1,0,0,0,30,299,1,0,0,0,32,307,1,0,0,0,34,313,1,0,0,0,36,323,1,
		0,0,0,38,325,1,0,0,0,40,41,5,1,0,0,41,42,3,2,1,0,42,43,5,1,0,0,43,49,1,
		0,0,0,44,45,5,2,0,0,45,46,3,2,1,0,46,47,5,3,0,0,47,49,1,0,0,0,48,40,1,
		0,0,0,48,44,1,0,0,0,49,50,1,0,0,0,50,51,5,0,0,1,51,1,1,0,0,0,52,53,3,32,
		16,0,53,54,5,4,0,0,54,55,3,4,2,0,55,58,1,0,0,0,56,58,3,4,2,0,57,52,1,0,
		0,0,57,56,1,0,0,0,58,3,1,0,0,0,59,62,3,6,3,0,60,62,3,16,8,0,61,59,1,0,
		0,0,61,60,1,0,0,0,62,5,1,0,0,0,63,64,6,3,-1,0,64,75,3,8,4,0,65,66,3,10,
		5,0,66,67,3,6,3,7,67,75,1,0,0,0,68,69,3,16,8,0,69,70,3,14,7,0,70,71,3,
		16,8,0,71,75,1,0,0,0,72,75,3,32,16,0,73,75,5,67,0,0,74,63,1,0,0,0,74,65,
		1,0,0,0,74,68,1,0,0,0,74,72,1,0,0,0,74,73,1,0,0,0,75,87,1,0,0,0,76,77,
		10,6,0,0,77,78,5,64,0,0,78,86,3,6,3,7,79,80,10,5,0,0,80,81,5,65,0,0,81,
		86,3,6,3,6,82,83,10,4,0,0,83,84,5,66,0,0,84,86,3,6,3,5,85,76,1,0,0,0,85,
		79,1,0,0,0,85,82,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,
		7,1,0,0,0,89,87,1,0,0,0,90,91,5,5,0,0,91,92,3,6,3,0,92,93,5,6,0,0,93,163,
		1,0,0,0,94,95,5,7,0,0,95,96,3,6,3,0,96,97,5,8,0,0,97,163,1,0,0,0,98,99,
		5,9,0,0,99,100,3,6,3,0,100,101,5,10,0,0,101,163,1,0,0,0,102,103,5,11,0,
		0,103,104,3,6,3,0,104,105,5,12,0,0,105,163,1,0,0,0,106,107,5,13,0,0,107,
		108,3,6,3,0,108,109,5,14,0,0,109,163,1,0,0,0,110,111,5,15,0,0,111,112,
		3,6,3,0,112,113,5,16,0,0,113,163,1,0,0,0,114,115,5,17,0,0,115,116,3,6,
		3,0,116,117,5,18,0,0,117,163,1,0,0,0,118,119,5,19,0,0,119,120,3,6,3,0,
		120,121,5,20,0,0,121,163,1,0,0,0,122,123,5,21,0,0,123,124,3,6,3,0,124,
		125,5,22,0,0,125,163,1,0,0,0,126,127,5,23,0,0,127,128,3,6,3,0,128,129,
		5,24,0,0,129,163,1,0,0,0,130,131,5,25,0,0,131,132,3,6,3,0,132,133,5,26,
		0,0,133,163,1,0,0,0,134,135,5,27,0,0,135,136,3,6,3,0,136,137,5,28,0,0,
		137,163,1,0,0,0,138,139,5,29,0,0,139,140,3,6,3,0,140,141,5,30,0,0,141,
		163,1,0,0,0,142,143,5,31,0,0,143,144,3,6,3,0,144,145,5,32,0,0,145,163,
		1,0,0,0,146,147,5,33,0,0,147,148,3,6,3,0,148,149,5,34,0,0,149,163,1,0,
		0,0,150,151,5,35,0,0,151,152,3,6,3,0,152,153,5,36,0,0,153,163,1,0,0,0,
		154,155,5,37,0,0,155,156,3,6,3,0,156,157,5,38,0,0,157,163,1,0,0,0,158,
		159,5,39,0,0,159,160,3,6,3,0,160,161,5,40,0,0,161,163,1,0,0,0,162,90,1,
		0,0,0,162,94,1,0,0,0,162,98,1,0,0,0,162,102,1,0,0,0,162,106,1,0,0,0,162,
		110,1,0,0,0,162,114,1,0,0,0,162,118,1,0,0,0,162,122,1,0,0,0,162,126,1,
		0,0,0,162,130,1,0,0,0,162,134,1,0,0,0,162,138,1,0,0,0,162,142,1,0,0,0,
		162,146,1,0,0,0,162,150,1,0,0,0,162,154,1,0,0,0,162,158,1,0,0,0,163,9,
		1,0,0,0,164,165,3,12,6,0,165,11,1,0,0,0,166,167,7,0,0,0,167,13,1,0,0,0,
		168,169,7,1,0,0,169,15,1,0,0,0,170,171,6,8,-1,0,171,190,3,18,9,0,172,173,
		3,20,10,0,173,174,5,51,0,0,174,175,3,16,8,0,175,176,5,52,0,0,176,190,1,
		0,0,0,177,178,3,22,11,0,178,179,3,16,8,9,179,190,1,0,0,0,180,181,3,26,
		13,0,181,182,5,51,0,0,182,183,3,16,8,0,183,184,5,53,0,0,184,185,3,16,8,
		0,185,186,5,52,0,0,186,190,1,0,0,0,187,190,3,32,16,0,188,190,5,73,0,0,
		189,170,1,0,0,0,189,172,1,0,0,0,189,177,1,0,0,0,189,180,1,0,0,0,189,187,
		1,0,0,0,189,188,1,0,0,0,190,208,1,0,0,0,191,192,10,7,0,0,192,193,5,72,
		0,0,193,207,3,16,8,8,194,195,10,6,0,0,195,196,5,70,0,0,196,207,3,16,8,
		7,197,198,10,5,0,0,198,199,5,71,0,0,199,207,3,16,8,6,200,201,10,4,0,0,
		201,202,5,68,0,0,202,207,3,16,8,5,203,204,10,3,0,0,204,205,5,69,0,0,205,
		207,3,16,8,4,206,191,1,0,0,0,206,194,1,0,0,0,206,197,1,0,0,0,206,200,1,
		0,0,0,206,203,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,
		209,17,1,0,0,0,210,208,1,0,0,0,211,212,5,5,0,0,212,213,3,16,8,0,213,214,
		5,6,0,0,214,284,1,0,0,0,215,216,5,7,0,0,216,217,3,16,8,0,217,218,5,8,0,
		0,218,284,1,0,0,0,219,220,5,9,0,0,220,221,3,16,8,0,221,222,5,10,0,0,222,
		284,1,0,0,0,223,224,5,11,0,0,224,225,3,16,8,0,225,226,5,12,0,0,226,284,
		1,0,0,0,227,228,5,13,0,0,228,229,3,16,8,0,229,230,5,14,0,0,230,284,1,0,
		0,0,231,232,5,15,0,0,232,233,3,16,8,0,233,234,5,16,0,0,234,284,1,0,0,0,
		235,236,5,17,0,0,236,237,3,16,8,0,237,238,5,18,0,0,238,284,1,0,0,0,239,
		240,5,19,0,0,240,241,3,16,8,0,241,242,5,20,0,0,242,284,1,0,0,0,243,244,
		5,21,0,0,244,245,3,16,8,0,245,246,5,22,0,0,246,284,1,0,0,0,247,248,5,23,
		0,0,248,249,3,16,8,0,249,250,5,24,0,0,250,284,1,0,0,0,251,252,5,25,0,0,
		252,253,3,16,8,0,253,254,5,26,0,0,254,284,1,0,0,0,255,256,5,27,0,0,256,
		257,3,16,8,0,257,258,5,28,0,0,258,284,1,0,0,0,259,260,5,29,0,0,260,261,
		3,16,8,0,261,262,5,30,0,0,262,284,1,0,0,0,263,264,5,31,0,0,264,265,3,16,
		8,0,265,266,5,32,0,0,266,284,1,0,0,0,267,268,5,33,0,0,268,269,3,16,8,0,
		269,270,5,34,0,0,270,284,1,0,0,0,271,272,5,35,0,0,272,273,3,16,8,0,273,
		274,5,36,0,0,274,284,1,0,0,0,275,276,5,37,0,0,276,277,3,16,8,0,277,278,
		5,38,0,0,278,284,1,0,0,0,279,280,5,39,0,0,280,281,3,16,8,0,281,282,5,40,
		0,0,282,284,1,0,0,0,283,211,1,0,0,0,283,215,1,0,0,0,283,219,1,0,0,0,283,
		223,1,0,0,0,283,227,1,0,0,0,283,231,1,0,0,0,283,235,1,0,0,0,283,239,1,
		0,0,0,283,243,1,0,0,0,283,247,1,0,0,0,283,251,1,0,0,0,283,255,1,0,0,0,
		283,259,1,0,0,0,283,263,1,0,0,0,283,267,1,0,0,0,283,271,1,0,0,0,283,275,
		1,0,0,0,283,279,1,0,0,0,284,19,1,0,0,0,285,286,5,54,0,0,286,21,1,0,0,0,
		287,288,3,24,12,0,288,23,1,0,0,0,289,290,5,69,0,0,290,25,1,0,0,0,291,292,
		3,28,14,0,292,27,1,0,0,0,293,295,5,55,0,0,294,296,7,2,0,0,295,294,1,0,
		0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,59,0,0,298,29,1,0,0,0,299,
		300,5,60,0,0,300,31,1,0,0,0,301,302,3,30,15,0,302,303,5,51,0,0,303,304,
		3,38,19,0,304,305,5,52,0,0,305,308,1,0,0,0,306,308,3,38,19,0,307,301,1,
		0,0,0,307,306,1,0,0,0,308,310,1,0,0,0,309,311,3,36,18,0,310,309,1,0,0,
		0,310,311,1,0,0,0,311,33,1,0,0,0,312,314,7,3,0,0,313,312,1,0,0,0,314,315,
		1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,35,1,0,0,0,317,318,5,62,0,
		0,318,319,3,34,17,0,319,320,5,52,0,0,320,324,1,0,0,0,321,322,5,63,0,0,
		322,324,7,4,0,0,323,317,1,0,0,0,323,321,1,0,0,0,324,37,1,0,0,0,325,329,
		5,75,0,0,326,328,7,4,0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,
		0,329,330,1,0,0,0,330,39,1,0,0,0,331,329,1,0,0,0,17,48,57,61,74,85,87,
		162,189,206,208,283,295,307,310,315,323,329
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
