//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/TeXpression.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class TeXpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, AND_OP=30, OR_OP=31, 
		EQ_OP=32, LOGIC_CONST=33, ADD_OP=34, SUB_OP=35, MUL_OP=36, DIV_OP=37, 
		EXP_OP=38, NUMBER=39, NUM_CONST=40, LETTER=41, DIGIT=42, WS=43, MISC_SKIP=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "AND_OP", "OR_OP", "EQ_OP", "LOGIC_CONST", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "EXP_OP", "NUMBER", "NUM_CONST", 
		"LETTER", "DIGIT", "WS", "MISC_SKIP", "GREEK"
	};


	public TeXpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TeXpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'\\('", "'\\)'", "'='", "'('", "')'", "'\\neg'", "'\\lnot'", 
		"'\\lsim'", "'!'", "'<='", "'>='", "'\\leq'", "'\\geq'", "'<'", "'>'", 
		"'{'", "'}'", "'}{'", "'\\sqrt'", "'\\'", "'d'", "'s'", "'t'", "'frac'", 
		"'\\bar'", "','", "'_{'", "'_'", null, null, null, null, "'+'", "'-'", 
		null, null, "'^'", null, "'\\pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "AND_OP", "OR_OP", "EQ_OP", "LOGIC_CONST", 
		"ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "EXP_OP", "NUMBER", "NUM_CONST", 
		"LETTER", "DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TeXpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TeXpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,401,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,
		4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,201,8,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,3,30,220,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,259,8,
		31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,269,8,32,1,33,1,33,1,34,
		1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,3,35,290,8,35,1,36,1,36,1,37,1,37,1,38,5,38,297,8,38,10,38,12,
		38,300,9,38,1,38,1,38,4,38,304,8,38,11,38,12,38,305,1,38,4,38,309,8,38,
		11,38,12,38,310,3,38,313,8,38,1,39,1,39,1,39,1,39,1,40,1,40,3,40,321,8,
		40,1,41,1,41,1,42,3,42,326,8,42,1,42,1,42,4,42,330,8,42,11,42,12,42,331,
		1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,3,43,349,8,43,3,43,351,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,400,8,44,
		0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
		51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
		75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,1,0,5,2,0,47,47,247,247,
		2,0,65,90,97,122,1,0,48,57,2,0,9,10,13,13,1,0,913,969,430,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,91,1,0,0,
		0,3,93,1,0,0,0,5,96,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,
		13,105,1,0,0,0,15,110,1,0,0,0,17,116,1,0,0,0,19,122,1,0,0,0,21,124,1,0,
		0,0,23,127,1,0,0,0,25,130,1,0,0,0,27,135,1,0,0,0,29,140,1,0,0,0,31,142,
		1,0,0,0,33,144,1,0,0,0,35,146,1,0,0,0,37,148,1,0,0,0,39,151,1,0,0,0,41,
		157,1,0,0,0,43,159,1,0,0,0,45,161,1,0,0,0,47,163,1,0,0,0,49,165,1,0,0,
		0,51,170,1,0,0,0,53,175,1,0,0,0,55,177,1,0,0,0,57,180,1,0,0,0,59,200,1,
		0,0,0,61,219,1,0,0,0,63,258,1,0,0,0,65,268,1,0,0,0,67,270,1,0,0,0,69,272,
		1,0,0,0,71,289,1,0,0,0,73,291,1,0,0,0,75,293,1,0,0,0,77,312,1,0,0,0,79,
		314,1,0,0,0,81,320,1,0,0,0,83,322,1,0,0,0,85,329,1,0,0,0,87,350,1,0,0,
		0,89,399,1,0,0,0,91,92,5,36,0,0,92,2,1,0,0,0,93,94,5,92,0,0,94,95,5,40,
		0,0,95,4,1,0,0,0,96,97,5,92,0,0,97,98,5,41,0,0,98,6,1,0,0,0,99,100,5,61,
		0,0,100,8,1,0,0,0,101,102,5,40,0,0,102,10,1,0,0,0,103,104,5,41,0,0,104,
		12,1,0,0,0,105,106,5,92,0,0,106,107,5,110,0,0,107,108,5,101,0,0,108,109,
		5,103,0,0,109,14,1,0,0,0,110,111,5,92,0,0,111,112,5,108,0,0,112,113,5,
		110,0,0,113,114,5,111,0,0,114,115,5,116,0,0,115,16,1,0,0,0,116,117,5,92,
		0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,120,5,105,0,0,120,121,5,109,
		0,0,121,18,1,0,0,0,122,123,5,33,0,0,123,20,1,0,0,0,124,125,5,60,0,0,125,
		126,5,61,0,0,126,22,1,0,0,0,127,128,5,62,0,0,128,129,5,61,0,0,129,24,1,
		0,0,0,130,131,5,92,0,0,131,132,5,108,0,0,132,133,5,101,0,0,133,134,5,113,
		0,0,134,26,1,0,0,0,135,136,5,92,0,0,136,137,5,103,0,0,137,138,5,101,0,
		0,138,139,5,113,0,0,139,28,1,0,0,0,140,141,5,60,0,0,141,30,1,0,0,0,142,
		143,5,62,0,0,143,32,1,0,0,0,144,145,5,123,0,0,145,34,1,0,0,0,146,147,5,
		125,0,0,147,36,1,0,0,0,148,149,5,125,0,0,149,150,5,123,0,0,150,38,1,0,
		0,0,151,152,5,92,0,0,152,153,5,115,0,0,153,154,5,113,0,0,154,155,5,114,
		0,0,155,156,5,116,0,0,156,40,1,0,0,0,157,158,5,92,0,0,158,42,1,0,0,0,159,
		160,5,100,0,0,160,44,1,0,0,0,161,162,5,115,0,0,162,46,1,0,0,0,163,164,
		5,116,0,0,164,48,1,0,0,0,165,166,5,102,0,0,166,167,5,114,0,0,167,168,5,
		97,0,0,168,169,5,99,0,0,169,50,1,0,0,0,170,171,5,92,0,0,171,172,5,98,0,
		0,172,173,5,97,0,0,173,174,5,114,0,0,174,52,1,0,0,0,175,176,5,44,0,0,176,
		54,1,0,0,0,177,178,5,95,0,0,178,179,5,123,0,0,179,56,1,0,0,0,180,181,5,
		95,0,0,181,58,1,0,0,0,182,183,5,92,0,0,183,184,5,119,0,0,184,185,5,101,
		0,0,185,186,5,100,0,0,186,187,5,103,0,0,187,201,5,101,0,0,188,189,5,92,
		0,0,189,190,5,108,0,0,190,191,5,97,0,0,191,192,5,110,0,0,192,201,5,100,
		0,0,193,194,5,92,0,0,194,201,5,38,0,0,195,196,5,92,0,0,196,197,5,99,0,
		0,197,198,5,100,0,0,198,199,5,111,0,0,199,201,5,116,0,0,200,182,1,0,0,
		0,200,188,1,0,0,0,200,193,1,0,0,0,200,195,1,0,0,0,201,60,1,0,0,0,202,203,
		5,92,0,0,203,204,5,118,0,0,204,205,5,101,0,0,205,220,5,101,0,0,206,207,
		5,92,0,0,207,208,5,108,0,0,208,209,5,111,0,0,209,220,5,114,0,0,210,211,
		5,92,0,0,211,212,5,112,0,0,212,213,5,97,0,0,213,214,5,114,0,0,214,215,
		5,97,0,0,215,216,5,108,0,0,216,217,5,108,0,0,217,218,5,101,0,0,218,220,
		5,108,0,0,219,202,1,0,0,0,219,206,1,0,0,0,219,210,1,0,0,0,220,62,1,0,0,
		0,221,259,5,61,0,0,222,223,5,92,0,0,223,224,5,108,0,0,224,225,5,101,0,
		0,225,226,5,102,0,0,226,227,5,116,0,0,227,228,5,114,0,0,228,229,5,105,
		0,0,229,230,5,103,0,0,230,231,5,104,0,0,231,232,5,116,0,0,232,233,5,97,
		0,0,233,234,5,114,0,0,234,235,5,114,0,0,235,236,5,111,0,0,236,259,5,119,
		0,0,237,238,5,92,0,0,238,239,5,76,0,0,239,240,5,101,0,0,240,241,5,102,
		0,0,241,242,5,116,0,0,242,243,5,114,0,0,243,244,5,105,0,0,244,245,5,103,
		0,0,245,246,5,104,0,0,246,247,5,116,0,0,247,248,5,97,0,0,248,249,5,114,
		0,0,249,250,5,114,0,0,250,251,5,111,0,0,251,259,5,119,0,0,252,253,5,92,
		0,0,253,254,5,110,0,0,254,255,5,101,0,0,255,259,5,113,0,0,256,257,5,33,
		0,0,257,259,5,61,0,0,258,221,1,0,0,0,258,222,1,0,0,0,258,237,1,0,0,0,258,
		252,1,0,0,0,258,256,1,0,0,0,259,64,1,0,0,0,260,261,5,92,0,0,261,262,5,
		116,0,0,262,263,5,111,0,0,263,269,5,112,0,0,264,265,5,92,0,0,265,266,5,
		98,0,0,266,267,5,111,0,0,267,269,5,116,0,0,268,260,1,0,0,0,268,264,1,0,
		0,0,269,66,1,0,0,0,270,271,5,43,0,0,271,68,1,0,0,0,272,273,5,45,0,0,273,
		70,1,0,0,0,274,290,5,42,0,0,275,276,5,92,0,0,276,277,5,97,0,0,277,278,
		5,115,0,0,278,290,5,116,0,0,279,280,5,92,0,0,280,281,5,100,0,0,281,282,
		5,111,0,0,282,290,5,116,0,0,283,284,5,92,0,0,284,285,5,116,0,0,285,286,
		5,105,0,0,286,287,5,109,0,0,287,288,5,101,0,0,288,290,5,115,0,0,289,274,
		1,0,0,0,289,275,1,0,0,0,289,279,1,0,0,0,289,283,1,0,0,0,290,72,1,0,0,0,
		291,292,7,0,0,0,292,74,1,0,0,0,293,294,5,94,0,0,294,76,1,0,0,0,295,297,
		3,83,41,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,
		0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,303,5,46,0,0,302,304,3,83,41,0,
		303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,313,
		1,0,0,0,307,309,3,83,41,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,
		0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,298,1,0,0,0,312,308,1,0,0,0,313,
		78,1,0,0,0,314,315,5,92,0,0,315,316,5,112,0,0,316,317,5,105,0,0,317,80,
		1,0,0,0,318,321,3,89,44,0,319,321,7,1,0,0,320,318,1,0,0,0,320,319,1,0,
		0,0,321,82,1,0,0,0,322,323,7,2,0,0,323,84,1,0,0,0,324,326,5,92,0,0,325,
		324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,330,5,32,0,0,328,330,7,
		3,0,0,329,325,1,0,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,
		331,332,1,0,0,0,332,333,1,0,0,0,333,334,6,42,0,0,334,86,1,0,0,0,335,336,
		5,92,0,0,336,337,5,108,0,0,337,338,5,101,0,0,338,339,5,102,0,0,339,351,
		5,116,0,0,340,341,5,92,0,0,341,342,5,114,0,0,342,343,5,105,0,0,343,344,
		5,103,0,0,344,345,5,104,0,0,345,346,5,116,0,0,346,348,1,0,0,0,347,349,
		5,46,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,335,1,0,0,
		0,350,340,1,0,0,0,351,352,1,0,0,0,352,353,6,43,0,0,353,88,1,0,0,0,354,
		400,7,4,0,0,355,356,5,92,0,0,356,357,5,97,0,0,357,358,5,108,0,0,358,359,
		5,112,0,0,359,360,5,104,0,0,360,400,5,97,0,0,361,362,5,92,0,0,362,363,
		5,98,0,0,363,364,5,101,0,0,364,365,5,116,0,0,365,400,5,97,0,0,366,367,
		5,92,0,0,367,368,5,100,0,0,368,369,5,101,0,0,369,370,5,108,0,0,370,371,
		5,116,0,0,371,400,5,97,0,0,372,373,5,92,0,0,373,374,5,112,0,0,374,375,
		5,104,0,0,375,400,5,105,0,0,376,377,5,92,0,0,377,378,5,115,0,0,378,379,
		5,105,0,0,379,380,5,103,0,0,380,381,5,109,0,0,381,400,5,97,0,0,382,383,
		5,92,0,0,383,384,5,116,0,0,384,385,5,97,0,0,385,400,5,117,0,0,386,387,
		5,92,0,0,387,388,5,108,0,0,388,389,5,97,0,0,389,390,5,109,0,0,390,391,
		5,98,0,0,391,392,5,100,0,0,392,400,5,97,0,0,393,394,5,92,0,0,394,395,5,
		111,0,0,395,396,5,109,0,0,396,397,5,101,0,0,397,398,5,103,0,0,398,400,
		5,97,0,0,399,354,1,0,0,0,399,355,1,0,0,0,399,361,1,0,0,0,399,366,1,0,0,
		0,399,372,1,0,0,0,399,376,1,0,0,0,399,382,1,0,0,0,399,386,1,0,0,0,399,
		393,1,0,0,0,400,90,1,0,0,0,17,0,200,219,258,268,289,298,305,310,312,320,
		325,329,331,348,350,399,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
