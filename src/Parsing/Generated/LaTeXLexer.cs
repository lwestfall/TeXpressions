//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/antlr/LaTeX.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LaTeXLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		FUNCTION=39, LETTER=40, DIGIT=41, WS=42, MISC_SKIP=43;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "FUNCTION", "LETTER", "DIGIT", 
		"WS", "MISC_SKIP", "GREEK"
	};


	public LaTeXLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LaTeXLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "'.'", "'{'", "'}'", "'\\pi'", "'-'", "'_{'", "'_'", 
		"'\\bar'", "'\"'", "'''", "'='", "'\\begin{matrix}'", "'\\end{matrix}'", 
		"'&'", "'\\\\'", "'<'", "'\\le'", "'q'", "'<='", "'>'", "'\\ge'", "'>='", 
		"'^'", "'^{'", "'*'", "'\\ast'", "'\\times'", "'/'", "'\\dot'", "'+'", 
		"'\\sqrt'", "'\\frac'", "'\\sfrac'", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "FUNCTION", "LETTER", "DIGIT", "WS", "MISC_SKIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LaTeX.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LaTeXLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,43,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,
		1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
		19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,
		24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,
		32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,
		38,1,38,3,38,234,8,38,1,39,1,39,3,39,238,8,39,1,40,1,40,1,41,3,41,243,
		8,41,1,41,1,41,4,41,247,8,41,11,41,12,41,248,1,41,1,41,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,266,8,42,3,42,268,
		8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,317,8,43,0,0,44,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
		42,85,43,87,0,1,0,4,2,0,65,90,97,122,1,0,48,57,2,0,9,10,13,13,1,0,913,
		969,331,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
		11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
		0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
		0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,89,
		1,0,0,0,3,91,1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,0,9,97,1,0,0,0,11,99,1,0,
		0,0,13,103,1,0,0,0,15,105,1,0,0,0,17,108,1,0,0,0,19,110,1,0,0,0,21,115,
		1,0,0,0,23,117,1,0,0,0,25,119,1,0,0,0,27,121,1,0,0,0,29,136,1,0,0,0,31,
		149,1,0,0,0,33,151,1,0,0,0,35,154,1,0,0,0,37,156,1,0,0,0,39,160,1,0,0,
		0,41,162,1,0,0,0,43,165,1,0,0,0,45,167,1,0,0,0,47,171,1,0,0,0,49,174,1,
		0,0,0,51,176,1,0,0,0,53,179,1,0,0,0,55,181,1,0,0,0,57,186,1,0,0,0,59,193,
		1,0,0,0,61,195,1,0,0,0,63,200,1,0,0,0,65,202,1,0,0,0,67,208,1,0,0,0,69,
		214,1,0,0,0,71,221,1,0,0,0,73,223,1,0,0,0,75,225,1,0,0,0,77,233,1,0,0,
		0,79,237,1,0,0,0,81,239,1,0,0,0,83,246,1,0,0,0,85,267,1,0,0,0,87,316,1,
		0,0,0,89,90,5,40,0,0,90,2,1,0,0,0,91,92,5,44,0,0,92,4,1,0,0,0,93,94,5,
		46,0,0,94,6,1,0,0,0,95,96,5,123,0,0,96,8,1,0,0,0,97,98,5,125,0,0,98,10,
		1,0,0,0,99,100,5,92,0,0,100,101,5,112,0,0,101,102,5,105,0,0,102,12,1,0,
		0,0,103,104,5,45,0,0,104,14,1,0,0,0,105,106,5,95,0,0,106,107,5,123,0,0,
		107,16,1,0,0,0,108,109,5,95,0,0,109,18,1,0,0,0,110,111,5,92,0,0,111,112,
		5,98,0,0,112,113,5,97,0,0,113,114,5,114,0,0,114,20,1,0,0,0,115,116,5,34,
		0,0,116,22,1,0,0,0,117,118,5,39,0,0,118,24,1,0,0,0,119,120,5,61,0,0,120,
		26,1,0,0,0,121,122,5,92,0,0,122,123,5,98,0,0,123,124,5,101,0,0,124,125,
		5,103,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,5,123,0,0,128,129,
		5,109,0,0,129,130,5,97,0,0,130,131,5,116,0,0,131,132,5,114,0,0,132,133,
		5,105,0,0,133,134,5,120,0,0,134,135,5,125,0,0,135,28,1,0,0,0,136,137,5,
		92,0,0,137,138,5,101,0,0,138,139,5,110,0,0,139,140,5,100,0,0,140,141,5,
		123,0,0,141,142,5,109,0,0,142,143,5,97,0,0,143,144,5,116,0,0,144,145,5,
		114,0,0,145,146,5,105,0,0,146,147,5,120,0,0,147,148,5,125,0,0,148,30,1,
		0,0,0,149,150,5,38,0,0,150,32,1,0,0,0,151,152,5,92,0,0,152,153,5,92,0,
		0,153,34,1,0,0,0,154,155,5,60,0,0,155,36,1,0,0,0,156,157,5,92,0,0,157,
		158,5,108,0,0,158,159,5,101,0,0,159,38,1,0,0,0,160,161,5,113,0,0,161,40,
		1,0,0,0,162,163,5,60,0,0,163,164,5,61,0,0,164,42,1,0,0,0,165,166,5,62,
		0,0,166,44,1,0,0,0,167,168,5,92,0,0,168,169,5,103,0,0,169,170,5,101,0,
		0,170,46,1,0,0,0,171,172,5,62,0,0,172,173,5,61,0,0,173,48,1,0,0,0,174,
		175,5,94,0,0,175,50,1,0,0,0,176,177,5,94,0,0,177,178,5,123,0,0,178,52,
		1,0,0,0,179,180,5,42,0,0,180,54,1,0,0,0,181,182,5,92,0,0,182,183,5,97,
		0,0,183,184,5,115,0,0,184,185,5,116,0,0,185,56,1,0,0,0,186,187,5,92,0,
		0,187,188,5,116,0,0,188,189,5,105,0,0,189,190,5,109,0,0,190,191,5,101,
		0,0,191,192,5,115,0,0,192,58,1,0,0,0,193,194,5,47,0,0,194,60,1,0,0,0,195,
		196,5,92,0,0,196,197,5,100,0,0,197,198,5,111,0,0,198,199,5,116,0,0,199,
		62,1,0,0,0,200,201,5,43,0,0,201,64,1,0,0,0,202,203,5,92,0,0,203,204,5,
		115,0,0,204,205,5,113,0,0,205,206,5,114,0,0,206,207,5,116,0,0,207,66,1,
		0,0,0,208,209,5,92,0,0,209,210,5,102,0,0,210,211,5,114,0,0,211,212,5,97,
		0,0,212,213,5,99,0,0,213,68,1,0,0,0,214,215,5,92,0,0,215,216,5,115,0,0,
		216,217,5,102,0,0,217,218,5,114,0,0,218,219,5,97,0,0,219,220,5,99,0,0,
		220,70,1,0,0,0,221,222,5,41,0,0,222,72,1,0,0,0,223,224,5,91,0,0,224,74,
		1,0,0,0,225,226,5,93,0,0,226,76,1,0,0,0,227,228,5,109,0,0,228,229,5,97,
		0,0,229,234,5,120,0,0,230,231,5,109,0,0,231,232,5,105,0,0,232,234,5,110,
		0,0,233,227,1,0,0,0,233,230,1,0,0,0,234,78,1,0,0,0,235,238,3,87,43,0,236,
		238,7,0,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,80,1,0,0,0,239,240,7,1,
		0,0,240,82,1,0,0,0,241,243,5,92,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,
		244,1,0,0,0,244,247,5,32,0,0,245,247,7,2,0,0,246,242,1,0,0,0,246,245,1,
		0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,
		250,251,6,41,0,0,251,84,1,0,0,0,252,253,5,92,0,0,253,254,5,108,0,0,254,
		255,5,101,0,0,255,256,5,102,0,0,256,268,5,116,0,0,257,258,5,92,0,0,258,
		259,5,114,0,0,259,260,5,105,0,0,260,261,5,103,0,0,261,262,5,104,0,0,262,
		263,5,116,0,0,263,265,1,0,0,0,264,266,5,46,0,0,265,264,1,0,0,0,265,266,
		1,0,0,0,266,268,1,0,0,0,267,252,1,0,0,0,267,257,1,0,0,0,268,269,1,0,0,
		0,269,270,6,42,0,0,270,86,1,0,0,0,271,317,7,3,0,0,272,273,5,92,0,0,273,
		274,5,97,0,0,274,275,5,108,0,0,275,276,5,112,0,0,276,277,5,104,0,0,277,
		317,5,97,0,0,278,279,5,92,0,0,279,280,5,98,0,0,280,281,5,101,0,0,281,282,
		5,116,0,0,282,317,5,97,0,0,283,284,5,92,0,0,284,285,5,100,0,0,285,286,
		5,101,0,0,286,287,5,108,0,0,287,288,5,116,0,0,288,317,5,97,0,0,289,290,
		5,92,0,0,290,291,5,112,0,0,291,292,5,104,0,0,292,317,5,105,0,0,293,294,
		5,92,0,0,294,295,5,115,0,0,295,296,5,105,0,0,296,297,5,103,0,0,297,298,
		5,109,0,0,298,317,5,97,0,0,299,300,5,92,0,0,300,301,5,116,0,0,301,302,
		5,97,0,0,302,317,5,117,0,0,303,304,5,92,0,0,304,305,5,108,0,0,305,306,
		5,97,0,0,306,307,5,109,0,0,307,308,5,98,0,0,308,309,5,100,0,0,309,317,
		5,97,0,0,310,311,5,92,0,0,311,312,5,111,0,0,312,313,5,109,0,0,313,314,
		5,101,0,0,314,315,5,103,0,0,315,317,5,97,0,0,316,271,1,0,0,0,316,272,1,
		0,0,0,316,278,1,0,0,0,316,283,1,0,0,0,316,289,1,0,0,0,316,293,1,0,0,0,
		316,299,1,0,0,0,316,303,1,0,0,0,316,310,1,0,0,0,317,88,1,0,0,0,9,0,233,
		237,242,246,248,265,267,316,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
